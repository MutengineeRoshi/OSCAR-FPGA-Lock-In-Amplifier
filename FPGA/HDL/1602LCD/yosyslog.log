
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+612 (git sha1 c6d8692c, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Parsing `lcd_top.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: lcd_top.v
Parsing Verilog input from `lcd_top.v' to AST representation.
Generating RTLIL representation for module `\lcd_top'.
Successfully finished Verilog frontend.

-- Parsing `lcd_defines.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: lcd_defines.v
Parsing Verilog input from `lcd_defines.v' to AST representation.
Successfully finished Verilog frontend.

-- Parsing `lcd_display.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: lcd_display.v
Parsing Verilog input from `lcd_display.v' to AST representation.
Generating RTLIL representation for module `\lcd'.
Successfully finished Verilog frontend.

-- Parsing `delay_counter.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: delay_counter.v
Parsing Verilog input from `delay_counter.v' to AST representation.
Generating RTLIL representation for module `\delay_counter'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top lcd_top -json yosysout_lcd.json' --

5. Executing SYNTH_ICE40 pass.

5.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `$__ICE40_FULL_ADDER'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

5.2. Executing HIERARCHY pass (managing design hierarchy).

5.2.1. Analyzing design hierarchy..
Top module:  \lcd_top
Used module:     \lcd
Used module:         \delay_counter

5.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\delay_counter'.
Parameter \counter_width = 20
Generating RTLIL representation for module `$paramod\delay_counter\counter_width=20'.

5.2.3. Analyzing design hierarchy..
Top module:  \lcd_top
Used module:     \lcd
Used module:         $paramod\delay_counter\counter_width=20

5.2.4. Analyzing design hierarchy..
Top module:  \lcd_top
Used module:     \lcd
Used module:         $paramod\delay_counter\counter_width=20
Removing unused module `\delay_counter'.
Removed 1 unused modules.
Mapping positional arguments of cell lcd_top.LCD (lcd).
Warning: Resizing cell port lcd.ram40_4kinst_physical.WDATA from 8 bits to 16 bits.
Warning: Resizing cell port lcd.ram40_4kinst_physical.WADDR from 7 bits to 11 bits.
Warning: Resizing cell port lcd.ram40_4kinst_physical.RADDR from 32 bits to 11 bits.
Warning: Resizing cell port lcd.ram40_4kinst_physical.RDATA from 8 bits to 16 bits.

5.3. Executing PROC pass (convert processes to netlists).

5.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$delay_counter.v:62$74 in module $paramod\delay_counter\counter_width=20.
Marked 1 switch rules as full_case in process $proc$lcd_display.v:433$48 in module lcd.
Marked 4 switch rules as full_case in process $proc$lcd_display.v:217$40 in module lcd.
Removed a total of 0 dead cases.

5.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 19 assignments to connections.

5.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\lcd.$proc$lcd_display.v:199$62'.
  Set init value: \tx_delay_load = 1'0
Found init rule in `\lcd.$proc$lcd_display.v:198$61'.
  Set init value: \main_delay_load = 1'0
Found init rule in `\lcd.$proc$lcd_display.v:194$60'.
  Set init value: \tx_delay_value = 20'00000000000000000000
Found init rule in `\lcd.$proc$lcd_display.v:193$59'.
  Set init value: \main_delay_value = 20'00000000000000000000
Found init rule in `\lcd.$proc$lcd_display.v:167$58'.
  Set init value: \LCD_E1 = 1'0
Found init rule in `\lcd.$proc$lcd_display.v:166$57'.
  Set init value: \LCD_E0 = 1'0
Found init rule in `\lcd.$proc$lcd_display.v:165$56'.
  Set init value: \SF_D1 = 4'0000
Found init rule in `\lcd.$proc$lcd_display.v:164$55'.
  Set init value: \SF_D0 = 4'0000
Found init rule in `\lcd.$proc$lcd_display.v:106$54'.
  Set init value: \pos = 0
Found init rule in `\lcd.$proc$lcd_display.v:105$53'.
  Set init value: \display_state = 5'00000
Found init rule in `\lcd.$proc$lcd_display.v:77$52'.
  Set init value: \tx_done = 1'0
Found init rule in `\lcd.$proc$lcd_display.v:74$51'.
  Set init value: \tx_state = 3'110
Found init rule in `\lcd_top.$proc$lcd_top.v:26$17'.
  Set init value: \reset = 1'1
Found init rule in `\lcd_top.$proc$lcd_top.v:25$16'.
  Set init value: \pos = 8'00000000
Found init rule in `\lcd_top.$proc$lcd_top.v:25$15'.
  Set init value: \dat = 8'00000000
Found init rule in `\lcd_top.$proc$lcd_top.v:24$14'.
  Set init value: \addr = 7'0000000
Found init rule in `\lcd_top.$proc$lcd_top.v:23$13'.
  Set init value: \count = 0

5.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\lcd.$proc$lcd_display.v:433$48'.
Found async reset \reset in `\lcd.$proc$lcd_display.v:217$40'.

5.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\delay_counter\counter_width=20.$proc$delay_counter.v:62$74'.
     1/1: $0\counter[19:0]
Creating decoders for process `\lcd.$proc$lcd_display.v:199$62'.
Creating decoders for process `\lcd.$proc$lcd_display.v:198$61'.
Creating decoders for process `\lcd.$proc$lcd_display.v:194$60'.
Creating decoders for process `\lcd.$proc$lcd_display.v:193$59'.
Creating decoders for process `\lcd.$proc$lcd_display.v:167$58'.
Creating decoders for process `\lcd.$proc$lcd_display.v:166$57'.
Creating decoders for process `\lcd.$proc$lcd_display.v:165$56'.
Creating decoders for process `\lcd.$proc$lcd_display.v:164$55'.
Creating decoders for process `\lcd.$proc$lcd_display.v:106$54'.
Creating decoders for process `\lcd.$proc$lcd_display.v:105$53'.
Creating decoders for process `\lcd.$proc$lcd_display.v:77$52'.
Creating decoders for process `\lcd.$proc$lcd_display.v:74$51'.
Creating decoders for process `\lcd.$proc$lcd_display.v:433$48'.
     1/6: $0\tx_delay_load[0:0]
     2/6: $0\tx_delay_value[19:0]
     3/6: $0\LCD_E0[0:0]
     4/6: $0\SF_D0[3:0]
     5/6: $0\tx_done[0:0]
     6/6: $0\tx_state[2:0]
Creating decoders for process `\lcd.$proc$lcd_display.v:217$40'.
     1/7: $0\main_delay_value[19:0]
     2/7: $0\main_delay_load[0:0]
     3/7: $0\LCD_E1[0:0]
     4/7: $0\SF_D1[3:0]
     5/7: $0\display_state[4:0]
     6/7: $0\tx_byte[7:0]
     7/7: $0\pos[31:0]
Creating decoders for process `\lcd_top.$proc$lcd_top.v:26$17'.
Creating decoders for process `\lcd_top.$proc$lcd_top.v:25$16'.
Creating decoders for process `\lcd_top.$proc$lcd_top.v:25$15'.
Creating decoders for process `\lcd_top.$proc$lcd_top.v:24$14'.
Creating decoders for process `\lcd_top.$proc$lcd_top.v:23$13'.
Creating decoders for process `\lcd_top.$proc$lcd_top.v:35$2'.
     1/3: $0\dat[7:0]
     2/3: $0\reset[0:0]
     3/3: $0\pos[7:0]

5.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\delay_counter\counter_width=20.\counter' using process `$paramod\delay_counter\counter_width=20.$proc$delay_counter.v:62$74'.
  created $dff cell `$procdff$382' with positive edge clock.
Creating register for signal `\lcd.\tx_state' using process `\lcd.$proc$lcd_display.v:433$48'.
  created $adff cell `$procdff$383' with positive edge clock and positive level reset.
Creating register for signal `\lcd.\tx_done' using process `\lcd.$proc$lcd_display.v:433$48'.
  created $dff cell `$procdff$384' with positive edge clock.
Creating register for signal `\lcd.\SF_D0' using process `\lcd.$proc$lcd_display.v:433$48'.
  created $dff cell `$procdff$385' with positive edge clock.
Creating register for signal `\lcd.\LCD_E0' using process `\lcd.$proc$lcd_display.v:433$48'.
  created $dff cell `$procdff$386' with positive edge clock.
Creating register for signal `\lcd.\tx_delay_value' using process `\lcd.$proc$lcd_display.v:433$48'.
  created $dff cell `$procdff$387' with positive edge clock.
Creating register for signal `\lcd.\tx_delay_load' using process `\lcd.$proc$lcd_display.v:433$48'.
  created $dff cell `$procdff$388' with positive edge clock.
Creating register for signal `\lcd.\pos' using process `\lcd.$proc$lcd_display.v:217$40'.
  created $dff cell `$procdff$389' with positive edge clock.
Creating register for signal `\lcd.\tx_byte' using process `\lcd.$proc$lcd_display.v:217$40'.
  created $dff cell `$procdff$390' with positive edge clock.
Creating register for signal `\lcd.\display_state' using process `\lcd.$proc$lcd_display.v:217$40'.
  created $adff cell `$procdff$391' with positive edge clock and positive level reset.
Creating register for signal `\lcd.\SF_D1' using process `\lcd.$proc$lcd_display.v:217$40'.
  created $dff cell `$procdff$392' with positive edge clock.
Creating register for signal `\lcd.\LCD_E1' using process `\lcd.$proc$lcd_display.v:217$40'.
  created $dff cell `$procdff$393' with positive edge clock.
Creating register for signal `\lcd.\main_delay_value' using process `\lcd.$proc$lcd_display.v:217$40'.
  created $adff cell `$procdff$394' with positive edge clock and positive level reset.
Creating register for signal `\lcd.\main_delay_load' using process `\lcd.$proc$lcd_display.v:217$40'.
  created $adff cell `$procdff$395' with positive edge clock and positive level reset.
Creating register for signal `\lcd_top.\count' using process `\lcd_top.$proc$lcd_top.v:35$2'.
  created $dff cell `$procdff$396' with positive edge clock.
Creating register for signal `\lcd_top.\addr' using process `\lcd_top.$proc$lcd_top.v:35$2'.
  created $dff cell `$procdff$397' with positive edge clock.
Creating register for signal `\lcd_top.\dat' using process `\lcd_top.$proc$lcd_top.v:35$2'.
  created $dff cell `$procdff$398' with positive edge clock.
Creating register for signal `\lcd_top.\pos' using process `\lcd_top.$proc$lcd_top.v:35$2'.
  created $dff cell `$procdff$399' with positive edge clock.
Creating register for signal `\lcd_top.\reset' using process `\lcd_top.$proc$lcd_top.v:35$2'.
  created $dff cell `$procdff$400' with positive edge clock.

5.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `$paramod\delay_counter\counter_width=20.$proc$delay_counter.v:62$74'.
Removing empty process `$paramod\delay_counter\counter_width=20.$proc$delay_counter.v:62$74'.
Removing empty process `lcd.$proc$lcd_display.v:199$62'.
Removing empty process `lcd.$proc$lcd_display.v:198$61'.
Removing empty process `lcd.$proc$lcd_display.v:194$60'.
Removing empty process `lcd.$proc$lcd_display.v:193$59'.
Removing empty process `lcd.$proc$lcd_display.v:167$58'.
Removing empty process `lcd.$proc$lcd_display.v:166$57'.
Removing empty process `lcd.$proc$lcd_display.v:165$56'.
Removing empty process `lcd.$proc$lcd_display.v:164$55'.
Removing empty process `lcd.$proc$lcd_display.v:106$54'.
Removing empty process `lcd.$proc$lcd_display.v:105$53'.
Removing empty process `lcd.$proc$lcd_display.v:77$52'.
Removing empty process `lcd.$proc$lcd_display.v:74$51'.
Found and cleaned up 8 empty switches in `\lcd.$proc$lcd_display.v:433$48'.
Removing empty process `lcd.$proc$lcd_display.v:433$48'.
Found and cleaned up 22 empty switches in `\lcd.$proc$lcd_display.v:217$40'.
Removing empty process `lcd.$proc$lcd_display.v:217$40'.
Removing empty process `lcd_top.$proc$lcd_top.v:26$17'.
Removing empty process `lcd_top.$proc$lcd_top.v:25$16'.
Removing empty process `lcd_top.$proc$lcd_top.v:25$15'.
Removing empty process `lcd_top.$proc$lcd_top.v:24$14'.
Removing empty process `lcd_top.$proc$lcd_top.v:23$13'.
Found and cleaned up 6 empty switches in `\lcd_top.$proc$lcd_top.v:35$2'.
Removing empty process `lcd_top.$proc$lcd_top.v:35$2'.
Cleaned up 37 empty switches.

5.4. Executing FLATTEN pass (flatten design).
Using template lcd for cells of type lcd.
Using template $paramod\delay_counter\counter_width=20 for cells of type $paramod\delay_counter\counter_width=20.
<suppressed ~2 debug messages>
No more expansions possible.
Deleting now unused module $paramod\delay_counter\counter_width=20.
Deleting now unused module lcd.

5.5. Executing TRIBUF pass.

5.6. Executing DEMINOUT pass (demote inout ports to input or output).

5.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.
<suppressed ~15 debug messages>

5.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..
Removed 0 unused cells and 121 unused wires.
<suppressed ~1 debug messages>

5.9. Executing CHECK pass (checking for obvious problems).
checking module lcd_top..
Warning: Wire lcd_top.\HC [15] is used but has no driver.
Warning: Wire lcd_top.\HC [14] is used but has no driver.
Warning: Wire lcd_top.\HC [13] is used but has no driver.
Warning: Wire lcd_top.\HC [12] is used but has no driver.
Warning: Wire lcd_top.\HC [11] is used but has no driver.
Warning: Wire lcd_top.\HC [10] is used but has no driver.
Warning: Wire lcd_top.\HC [9] is used but has no driver.
Warning: Wire lcd_top.\HC [8] is used but has no driver.
Warning: Wire lcd_top.\HC [7] is used but has no driver.
Warning: Wire lcd_top.\HC [6] is used but has no driver.
Warning: Wire lcd_top.\HC [5] is used but has no driver.
Warning: Wire lcd_top.\HC [4] is used but has no driver.
Warning: Wire lcd_top.\HC [3] is used but has no driver.
Warning: Wire lcd_top.\HC [2] is used but has no driver.
Warning: Wire lcd_top.\HC [1] is used but has no driver.
Warning: Wire lcd_top.\HC [0] is used but has no driver.
found and reported 16 problems.

5.10. Executing OPT pass (performing simple optimizations).

5.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
<suppressed ~249 debug messages>
Removed a total of 83 cells.

5.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

5.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_top.
    New input vector for $reduce_and cell $reduce_and$lcd_top.v:29$1: { \count [0] \count [1] \count [2] \count [3] \count [4] \count [5] \count [6] \count [7] \count [8] \count [9] \count [10] \count [11] \count [12] \count [13] \count [14] \count [15] \count [16] \count [17] \count [18] \count [19] \count [20] }
    New ctrl vector for $pmux cell $techmap\LCD.$procmux$245: { $auto$opt_reduce.cc:132:opt_mux$404 $auto$opt_reduce.cc:132:opt_mux$402 }
    New ctrl vector for $pmux cell $techmap\LCD.$procmux$266: { $auto$opt_reduce.cc:132:opt_mux$406 $techmap\LCD.$procmux$175_CMP }
    New ctrl vector for $pmux cell $techmap\LCD.$procmux$338: { $techmap\LCD.$eq$lcd_display.v:184$26_Y $techmap\LCD.$eq$lcd_display.v:185$27_Y $techmap\LCD.$eq$lcd_display.v:186$28_Y $techmap\LCD.$eq$lcd_display.v:187$29_Y $techmap\LCD.$eq$lcd_display.v:188$30_Y $techmap\LCD.$eq$lcd_display.v:189$31_Y $auto$opt_reduce.cc:132:opt_mux$410 $auto$opt_reduce.cc:132:opt_mux$408 }
    New ctrl vector for $pmux cell $techmap\LCD.$procmux$120: { $auto$opt_reduce.cc:132:opt_mux$414 $auto$opt_reduce.cc:132:opt_mux$412 }
    New ctrl vector for $pmux cell $techmap\LCD.$procmux$130: { $auto$opt_reduce.cc:132:opt_mux$418 $auto$opt_reduce.cc:132:opt_mux$416 }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$401: { $techmap\LCD.$procmux$246_CMP $techmap\LCD.$procmux$190_CMP $techmap\LCD.$procmux$184_CMP $techmap\LCD.$procmux$178_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$407: { $techmap\LCD.$procmux$296_CMP $techmap\LCD.$procmux$275_CMP $techmap\LCD.$procmux$197_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$411: { $techmap\LCD.$procmux$122_CMP $techmap\LCD.$procmux$113_CMP $techmap\LCD.$procmux$110_CMP $techmap\LCD.$procmux$104_CMP $techmap\LCD.$procmux$100_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$417: { $techmap\LCD.$procmux$116_CMP $techmap\LCD.$procmux$100_CMP }
  Optimizing cells in module \lcd_top.
Performed a total of 10 changes.

5.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

5.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..
Removed 0 unused cells and 100 unused wires.
<suppressed ~1 debug messages>

5.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.10.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

5.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_top.
    New ctrl vector for $pmux cell $techmap\LCD.$procmux$103: { $techmap\LCD.$procmux$116_CMP $techmap\LCD.$procmux$113_CMP $auto$opt_reduce.cc:132:opt_mux$420 $techmap\LCD.$procmux$107_CMP $techmap\LCD.$procmux$104_CMP }
    New ctrl vector for $pmux cell $techmap\LCD.$procmux$171: { $techmap\LCD.$procmux$197_CMP $techmap\LCD.$procmux$193_CMP $techmap\LCD.$procmux$187_CMP $auto$opt_reduce.cc:132:opt_mux$424 $auto$opt_reduce.cc:132:opt_mux$422 $techmap\LCD.$eq$lcd_display.v:187$29_Y }
    New ctrl vector for $pmux cell $techmap\LCD.$procmux$207: { $techmap\LCD.$procmux$197_CMP $auto$opt_reduce.cc:132:opt_mux$426 $techmap\LCD.$eq$lcd_display.v:187$29_Y }
    New ctrl vector for $pmux cell $techmap\LCD.$procmux$83: { $auto$opt_reduce.cc:132:opt_mux$428 $techmap\LCD.$procmux$122_CMP $techmap\LCD.$procmux$104_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$419: { $techmap\LCD.$procmux$110_CMP $techmap\LCD.$procmux$100_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$427: { $techmap\LCD.$procmux$116_CMP $techmap\LCD.$procmux$113_CMP $techmap\LCD.$procmux$110_CMP $techmap\LCD.$procmux$107_CMP $techmap\LCD.$procmux$100_CMP }
  Optimizing cells in module \lcd_top.
Performed a total of 6 changes.

5.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
Removed a total of 0 cells.

5.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

5.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..

5.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.10.16. Rerunning OPT passes. (Maybe there is more to do..)

5.10.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

5.10.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_top.
Performed a total of 0 changes.

5.10.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
Removed a total of 0 cells.

5.10.20. Executing OPT_RMDFF pass (remove dff with constant values).

5.10.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..

5.10.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.10.23. Finished OPT passes. (There is nothing left to do.)

5.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell lcd_top.$add$lcd_top.v:37$3 ($add).
Removed top 25 bits (of 32) from port B of cell lcd_top.$ge$lcd_top.v:39$4 ($ge).
Removed top 31 bits (of 32) from port B of cell lcd_top.$add$lcd_top.v:40$6 ($add).
Removed top 23 bits (of 32) from port Y of cell lcd_top.$add$lcd_top.v:40$6 ($add).
Removed top 4 bits (of 8) from port B of cell lcd_top.$eq$lcd_top.v:41$7 ($eq).
Removed top 1 bits (of 8) from port B of cell lcd_top.$eq$lcd_top.v:42$8 ($eq).
Removed top 31 bits (of 32) from port B of cell lcd_top.$add$lcd_top.v:44$9 ($add).
Removed top 25 bits (of 32) from port Y of cell lcd_top.$add$lcd_top.v:44$9 ($add).
Removed top 23 bits (of 32) from port B of cell lcd_top.$eq$lcd_top.v:47$12 ($eq).
Removed top 1 bits (of 8) from mux cell lcd_top.$procmux$370 ($mux).
Removed top 1 bits (of 8) from mux cell lcd_top.$procmux$372 ($mux).
Removed top 1 bits (of 8) from FF cell lcd_top.$procdff$398 ($dff).
Removed top 1 bits (of 5) from mux cell lcd_top.$techmap\LCD.$procmux$272 ($mux).
Removed top 1 bits (of 5) from port B of cell lcd_top.$techmap\LCD.$procmux$246_CMP0 ($eq).
Removed top 4 bits (of 5) from port B of cell lcd_top.$techmap\LCD.$procmux$196_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell lcd_top.$techmap\LCD.$procmux$193_CMP0 ($eq).
Removed top 2 bits (of 20) from mux cell lcd_top.$techmap\LCD.$procmux$191 ($mux).
Removed top 3 bits (of 5) from port B of cell lcd_top.$techmap\LCD.$procmux$190_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell lcd_top.$techmap\LCD.$procmux$187_CMP0 ($eq).
Removed top 7 bits (of 20) from mux cell lcd_top.$techmap\LCD.$procmux$185 ($mux).
Removed top 2 bits (of 5) from port B of cell lcd_top.$techmap\LCD.$procmux$184_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell lcd_top.$techmap\LCD.$procmux$181_CMP0 ($eq).
Removed top 2 bits (of 5) from port B of cell lcd_top.$techmap\LCD.$procmux$178_CMP0 ($eq).
Removed top 16 bits (of 20) from mux cell lcd_top.$techmap\LCD.$procmux$176 ($mux).
Removed top 1 bits (of 5) from port B of cell lcd_top.$techmap\LCD.$procmux$175_CMP0 ($eq).
Removed top 9 bits (of 20) from mux cell lcd_top.$techmap\LCD.$procmux$173 ($mux).
Removed top 3 bits (of 20) from mux cell lcd_top.$techmap\LCD.$procmux$169 ($mux).
Removed top 2 bits (of 3) from port B of cell lcd_top.$techmap\LCD.$procmux$116_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell lcd_top.$techmap\LCD.$procmux$113_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell lcd_top.$techmap\LCD.$procmux$110_CMP0 ($eq).
Removed top 30 bits (of 32) from port B of cell lcd_top.$techmap\LCD.$add$lcd_display.v:397$44 ($add).
Removed top 3 bits (of 7) from port B of cell lcd_top.$techmap\LCD.$eq$lcd_display.v:394$43 ($eq).
Removed top 1 bits (of 8) from wire lcd_top.$0\dat[7:0].
Removed top 23 bits (of 32) from wire lcd_top.$add$lcd_top.v:40$6_Y.
Removed top 1 bits (of 8) from wire lcd_top.$procmux$370_Y.
Removed top 3 bits (of 20) from wire lcd_top.$techmap\LCD.$procmux$169_Y.
Removed top 9 bits (of 20) from wire lcd_top.$techmap\LCD.$procmux$173_Y.
Removed top 16 bits (of 20) from wire lcd_top.$techmap\LCD.$procmux$176_Y.
Removed top 7 bits (of 20) from wire lcd_top.$techmap\LCD.$procmux$185_Y.
Removed top 2 bits (of 20) from wire lcd_top.$techmap\LCD.$procmux$191_Y.
Removed top 1 bits (of 5) from wire lcd_top.$techmap\LCD.$procmux$272_Y.
Removed top 1 bits (of 8) from wire lcd_top.LCD.dat.

5.12. Executing PEEPOPT pass (run peephole optimizers).

5.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing TECHMAP pass (map to technology primitives).

5.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

5.15.2. Continuing TECHMAP pass.
Using template $paramod$5652dda64580ddd7861fd245e644fd33eae2e158\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d87a48a4cd82717ae6bd57e6fe5ce90d87c44016\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$4cde4291caf5aa85a196975f3624151774a86d78\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$169bae89c32dcc6f3626d16cf9f47ceb469145db\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d31416a5863a8a220e16d7940a75ab70541ab32a\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~572 debug messages>

5.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..
Removed 0 unused cells and 18 unused wires.
<suppressed ~1 debug messages>

5.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module lcd_top:
  creating $macc model for $add$lcd_top.v:37$3 ($add).
  creating $macc model for $add$lcd_top.v:40$6 ($add).
  creating $macc model for $add$lcd_top.v:44$9 ($add).
  creating $macc model for $techmap\LCD.$add$lcd_display.v:397$44 ($add).
  creating $macc model for $techmap\LCD.delay_counter.$sub$delay_counter.v:66$75 ($sub).
  creating $alu model for $macc $techmap\LCD.delay_counter.$sub$delay_counter.v:66$75.
  creating $alu model for $macc $techmap\LCD.$add$lcd_display.v:397$44.
  creating $alu model for $macc $add$lcd_top.v:44$9.
  creating $alu model for $macc $add$lcd_top.v:40$6.
  creating $alu model for $macc $add$lcd_top.v:37$3.
  creating $alu model for $ge$lcd_top.v:39$4 ($ge): new $alu
  creating $alu cell for $ge$lcd_top.v:39$4: $auto$alumacc.cc:474:replace_alu$452
  creating $alu cell for $add$lcd_top.v:37$3: $auto$alumacc.cc:474:replace_alu$461
  creating $alu cell for $add$lcd_top.v:40$6: $auto$alumacc.cc:474:replace_alu$464
  creating $alu cell for $add$lcd_top.v:44$9: $auto$alumacc.cc:474:replace_alu$467
  creating $alu cell for $techmap\LCD.$add$lcd_display.v:397$44: $auto$alumacc.cc:474:replace_alu$470
  creating $alu cell for $techmap\LCD.delay_counter.$sub$delay_counter.v:66$75: $auto$alumacc.cc:474:replace_alu$473
  created 6 $alu and 0 $macc cells.

5.19. Executing OPT pass (performing simple optimizations).

5.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
Removed a total of 0 cells.

5.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

5.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_top.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$459: { $auto$rtlil.cc:1832:Not$456 $auto$rtlil.cc:1835:ReduceAnd$458 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$457: { $auto$alumacc.cc:490:replace_alu$453 [0] $auto$alumacc.cc:490:replace_alu$453 [1] $auto$alumacc.cc:490:replace_alu$453 [2] $auto$alumacc.cc:490:replace_alu$453 [3] $auto$alumacc.cc:490:replace_alu$453 [4] $auto$alumacc.cc:490:replace_alu$453 [5] $auto$alumacc.cc:490:replace_alu$453 [6] $auto$alumacc.cc:490:replace_alu$453 [7] $auto$alumacc.cc:490:replace_alu$453 [8] $auto$alumacc.cc:490:replace_alu$453 [9] $auto$alumacc.cc:490:replace_alu$453 [10] $auto$alumacc.cc:490:replace_alu$453 [11] $auto$alumacc.cc:490:replace_alu$453 [12] $auto$alumacc.cc:490:replace_alu$453 [13] $auto$alumacc.cc:490:replace_alu$453 [14] $auto$alumacc.cc:490:replace_alu$453 [15] $auto$alumacc.cc:490:replace_alu$453 [16] $auto$alumacc.cc:490:replace_alu$453 [17] $auto$alumacc.cc:490:replace_alu$453 [18] $auto$alumacc.cc:490:replace_alu$453 [19] $auto$alumacc.cc:490:replace_alu$453 [20] $auto$alumacc.cc:490:replace_alu$453 [21] $auto$alumacc.cc:490:replace_alu$453 [22] $auto$alumacc.cc:490:replace_alu$453 [23] $auto$alumacc.cc:490:replace_alu$453 [24] $auto$alumacc.cc:490:replace_alu$453 [25] $auto$alumacc.cc:490:replace_alu$453 [26] $auto$alumacc.cc:490:replace_alu$453 [27] $auto$alumacc.cc:490:replace_alu$453 [28] $auto$alumacc.cc:490:replace_alu$453 [29] $auto$alumacc.cc:490:replace_alu$453 [30] $auto$alumacc.cc:490:replace_alu$453 [31] }
  Optimizing cells in module \lcd_top.
Performed a total of 2 changes.

5.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
Removed a total of 0 cells.

5.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.19.9. Rerunning OPT passes. (Maybe there is more to do..)

5.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~21 debug messages>

5.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_top.
Performed a total of 0 changes.

5.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
Removed a total of 0 cells.

5.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

5.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..

5.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.19.16. Finished OPT passes. (There is nothing left to do.)

5.20. Executing FSM pass (extract and optimize FSM).

5.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking lcd_top.LCD.SF_D1 as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking lcd_top.LCD.display_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking lcd_top.LCD.main_delay_value as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking lcd_top.LCD.tx_delay_value as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.
Not marking lcd_top.LCD.tx_state as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

5.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..

5.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.21. Executing OPT pass (performing simple optimizations).

5.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
Removed a total of 0 cells.

5.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..

5.21.5. Finished fast OPT passes.

5.22. Executing MEMORY pass.

5.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

5.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..

5.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..

5.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

5.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..

5.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

5.25. Executing TECHMAP pass (map to technology primitives).

5.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

5.25.2. Continuing TECHMAP pass.
No more expansions possible.

5.26. Executing ICE40_BRAMINIT pass.

5.27. Executing OPT pass (performing simple optimizations).

5.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.
<suppressed ~16 debug messages>

5.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
Removed a total of 0 cells.

5.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

5.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

5.27.5. Finished fast OPT passes.

5.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

5.29. Executing OPT pass (performing simple optimizations).

5.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
Removed a total of 0 cells.

5.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

5.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_top.
    Consolidated identical input bits for $mux cell $procmux$370:
      Old ports: A=7'0000000, B=7'1001000, Y=$auto$wreduce.cc:455:run$431 [6:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$431 [3]
      New connections: { $auto$wreduce.cc:455:run$431 [6:4] $auto$wreduce.cc:455:run$431 [2:0] } = { $auto$wreduce.cc:455:run$431 [3] 5'00000 }
    Consolidated identical input bits for $mux cell $techmap\LCD.$procmux$169:
      Old ports: A=17'00000000000000000, B=17'10100000001010000, Y=$auto$wreduce.cc:455:run$432 [16:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$432 [4]
      New connections: { $auto$wreduce.cc:455:run$432 [16:5] $auto$wreduce.cc:455:run$432 [3:0] } = { $auto$wreduce.cc:455:run$432 [4] 1'0 $auto$wreduce.cc:455:run$432 [4] 7'0000000 $auto$wreduce.cc:455:run$432 [4] 5'00000 }
    Consolidated identical input bits for $pmux cell $techmap\LCD.$procmux$171:
      Old ports: A=20'00000000000000000000, B={ 22'1011011100011011000000 $auto$wreduce.cc:455:run$436 [17:0] 7'0000000 $auto$wreduce.cc:455:run$435 [12:0] 16'0000000000000000 $auto$wreduce.cc:455:run$434 [3:0] 9'000000000 $auto$wreduce.cc:455:run$433 [10:0] 3'000 $auto$wreduce.cc:455:run$432 [16:0] }, Y=$techmap\LCD.$0\main_delay_value[19:0]
      New ports: A=19'0000000000000000000, B={ 20'11101110001101100000 $auto$wreduce.cc:455:run$436 [17:0] 6'000000 $auto$wreduce.cc:455:run$435 [12:0] 15'000000000000000 $auto$wreduce.cc:455:run$434 [3:0] 8'00000000 $auto$wreduce.cc:455:run$433 [10:0] 2'00 $auto$wreduce.cc:455:run$432 [16:0] }, Y={ $techmap\LCD.$0\main_delay_value[19:0] [19] $techmap\LCD.$0\main_delay_value[19:0] [17:0] }
      New connections: $techmap\LCD.$0\main_delay_value[19:0] [18] = 1'0
    Consolidated identical input bits for $mux cell $techmap\LCD.$procmux$173:
      Old ports: A=11'00000000000, B=11'11111010000, Y=$auto$wreduce.cc:455:run$433 [10:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$433 [4]
      New connections: { $auto$wreduce.cc:455:run$433 [10:5] $auto$wreduce.cc:455:run$433 [3:0] } = { $auto$wreduce.cc:455:run$433 [4] $auto$wreduce.cc:455:run$433 [4] $auto$wreduce.cc:455:run$433 [4] $auto$wreduce.cc:455:run$433 [4] $auto$wreduce.cc:455:run$433 [4] 5'00000 }
    Consolidated identical input bits for $mux cell $techmap\LCD.$procmux$176:
      Old ports: A=4'0000, B=4'1011, Y=$auto$wreduce.cc:455:run$434 [3:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$434 [0]
      New connections: $auto$wreduce.cc:455:run$434 [3:1] = { $auto$wreduce.cc:455:run$434 [0] 1'0 $auto$wreduce.cc:455:run$434 [0] }
    Consolidated identical input bits for $mux cell $techmap\LCD.$procmux$185:
      Old ports: A=13'0000000000000, B=13'1001110001000, Y=$auto$wreduce.cc:455:run$435 [12:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$435 [3]
      New connections: { $auto$wreduce.cc:455:run$435 [12:4] $auto$wreduce.cc:455:run$435 [2:0] } = { $auto$wreduce.cc:455:run$435 [3] 2'00 $auto$wreduce.cc:455:run$435 [3] $auto$wreduce.cc:455:run$435 [3] $auto$wreduce.cc:455:run$435 [3] 6'000000 }
    Consolidated identical input bits for $mux cell $techmap\LCD.$procmux$191:
      Old ports: A=18'000000000000000000, B=18'110010000011001000, Y=$auto$wreduce.cc:455:run$436 [17:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$436 [3]
      New connections: { $auto$wreduce.cc:455:run$436 [17:4] $auto$wreduce.cc:455:run$436 [2:0] } = { $auto$wreduce.cc:455:run$436 [3] $auto$wreduce.cc:455:run$436 [3] 2'00 $auto$wreduce.cc:455:run$436 [3] 5'00000 $auto$wreduce.cc:455:run$436 [3] $auto$wreduce.cc:455:run$436 [3] 5'00000 }
    Consolidated identical input bits for $mux cell $techmap\LCD.$procmux$272:
      Old ports: A=4'0010, B=4'1000, Y=$auto$wreduce.cc:455:run$437 [3:0]
      New ports: A=2'01, B=2'10, Y={ $auto$wreduce.cc:455:run$437 [3] $auto$wreduce.cc:455:run$437 [1] }
      New connections: { $auto$wreduce.cc:455:run$437 [2] $auto$wreduce.cc:455:run$437 [0] } = 2'00
  Optimizing cells in module \lcd_top.
    Consolidated identical input bits for $mux cell $procmux$372:
      Old ports: A=$auto$wreduce.cc:455:run$431 [6:0], B=7'1001001, Y=$0\dat[7:0]
      New ports: A={ $auto$wreduce.cc:455:run$431 [3] 1'0 }, B=2'11, Y={ $0\dat[7:0] [3] $0\dat[7:0] [0] }
      New connections: { $0\dat[7:0] [6:4] $0\dat[7:0] [2:1] } = { $0\dat[7:0] [3] 4'0000 }
    Consolidated identical input bits for $pmux cell $techmap\LCD.$procmux$171:
      Old ports: A=19'0000000000000000000, B={ 20'11101110001101100000 $auto$wreduce.cc:455:run$436 [17:0] 6'000000 $auto$wreduce.cc:455:run$435 [12:0] 15'000000000000000 $auto$wreduce.cc:455:run$434 [3:0] 8'00000000 $auto$wreduce.cc:455:run$433 [10:0] 2'00 $auto$wreduce.cc:455:run$432 [16:0] }, Y={ $techmap\LCD.$0\main_delay_value[19:0] [19] $techmap\LCD.$0\main_delay_value[19:0] [17:0] }
      New ports: A=13'0000000000000, B={ 13'1111001101100 $auto$wreduce.cc:455:run$436 [3] 1'0 $auto$wreduce.cc:455:run$436 [3] 4'0000 $auto$wreduce.cc:455:run$436 [3] $auto$wreduce.cc:455:run$436 [3] 2'00 $auto$wreduce.cc:455:run$436 [3] 4'0000 $auto$wreduce.cc:455:run$435 [3] 1'0 $auto$wreduce.cc:455:run$435 [3] $auto$wreduce.cc:455:run$435 [3] $auto$wreduce.cc:455:run$435 [3] 3'000 $auto$wreduce.cc:455:run$435 [3] 12'000000000000 $auto$wreduce.cc:455:run$434 [0] $auto$wreduce.cc:455:run$434 [0] 4'0000 $auto$wreduce.cc:455:run$433 [4] $auto$wreduce.cc:455:run$433 [4] $auto$wreduce.cc:455:run$433 [4] $auto$wreduce.cc:455:run$433 [4] $auto$wreduce.cc:455:run$433 [4] 1'0 $auto$wreduce.cc:455:run$433 [4] 2'00 $auto$wreduce.cc:455:run$432 [4] $auto$wreduce.cc:455:run$432 [4] 6'000000 $auto$wreduce.cc:455:run$432 [4] 1'0 $auto$wreduce.cc:455:run$432 [4] 2'00 }, Y={ $techmap\LCD.$0\main_delay_value[19:0] [16] $techmap\LCD.$0\main_delay_value[19:0] [14:12] $techmap\LCD.$0\main_delay_value[19:0] [10:3] $techmap\LCD.$0\main_delay_value[19:0] [0] }
      New connections: { $techmap\LCD.$0\main_delay_value[19:0] [19] $techmap\LCD.$0\main_delay_value[19:0] [17] $techmap\LCD.$0\main_delay_value[19:0] [15] $techmap\LCD.$0\main_delay_value[19:0] [11] $techmap\LCD.$0\main_delay_value[19:0] [2:1] } = { $techmap\LCD.$0\main_delay_value[19:0] [5] $techmap\LCD.$0\main_delay_value[19:0] [13] 3'000 $techmap\LCD.$0\main_delay_value[19:0] [0] }
  Optimizing cells in module \lcd_top.
Performed a total of 10 changes.

5.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

5.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

5.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.29.9. Rerunning OPT passes. (Maybe there is more to do..)

5.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lcd_top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~20 debug messages>

5.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lcd_top.
Performed a total of 0 changes.

5.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
Removed a total of 0 cells.

5.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

5.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..

5.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.29.16. Finished OPT passes. (There is nothing left to do.)

5.30. Executing TECHMAP pass (map to technology primitives).

5.30.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.30.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

5.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=8\Y_WIDTH=9 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=7\Y_WIDTH=7 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=2\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $adff.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=8 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=5\S_WIDTH=21 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=4\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=13\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=7 for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=7\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=20\S_WIDTH=5 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=20\B_WIDTH=1\Y_WIDTH=20 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
No more expansions possible.
<suppressed ~555 debug messages>

5.31. Executing ICE40_OPT pass (performing simple optimizations).

5.31.1. Running ICE40 specific optimizations.

5.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.
<suppressed ~919 debug messages>

5.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
<suppressed ~1083 debug messages>
Removed a total of 361 cells.

5.31.4. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $auto$simplemap.cc:496:simplemap_adff$945 ($_DFF_PP0_) from module lcd_top.
Removing $auto$simplemap.cc:420:simplemap_dff$736 ($_DFF_P_) from module lcd_top.
Replaced 2 DFF cells.

5.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..
Removed 109 unused cells and 584 unused wires.
<suppressed ~110 debug messages>

5.31.6. Rerunning OPT passes. (Removed registers in this run.)

5.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell lcd_top.$auto$alumacc.cc:474:replace_alu$452.slice[0].carry: CO=$auto$alumacc.cc:474:replace_alu$452.BB [0]
Optimized away SB_CARRY cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[0].carry: CO=\count [0]
Optimized away SB_CARRY cell lcd_top.$auto$alumacc.cc:474:replace_alu$464.slice[0].carry: CO=\pos [0]
Optimized away SB_CARRY cell lcd_top.$auto$alumacc.cc:474:replace_alu$467.slice[0].carry: CO=\addr [0]
Optimized away SB_CARRY cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[0].carry: CO=\LCD.pos [0]
Optimized away SB_CARRY cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[0].carry: CO=\LCD.delay_counter.counter [0]
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[1].adder back to logic.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$464.slice[1].adder back to logic.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$467.slice[1].adder back to logic.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[1].adder back to logic.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[1].adder back to logic.

5.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.
<suppressed ~64 debug messages>

5.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

5.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

5.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

5.31.12. Rerunning OPT passes. (Removed registers in this run.)

5.31.13. Running ICE40 specific optimizations.

5.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
Removed a total of 0 cells.

5.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

5.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..

5.31.18. Finished OPT passes. (There is nothing left to do.)

5.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

5.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module lcd_top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2196 to $_DFFE_PP_ for $techmap\LCD.delay_counter.$0\counter[19:0] [1] -> \LCD.delay_counter.counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$693 to $_DFFE_PP_ for $0\count[31:0] [1] -> \count [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$725 to $_DFFE_PP_ for $0\addr[6:0] [1] -> \addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$738 to $_DFFE_PP_ for $0\pos[7:0] [0] -> \pos [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$739 to $_DFFE_PP_ for $0\pos[7:0] [1] -> \pos [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$740 to $_DFFE_PP_ for $0\pos[7:0] [2] -> \pos [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$741 to $_DFFE_PP_ for $0\pos[7:0] [3] -> \pos [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$742 to $_DFFE_PP_ for $0\pos[7:0] [4] -> \pos [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$743 to $_DFFE_PP_ for $0\pos[7:0] [5] -> \pos [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$744 to $_DFFE_PP_ for $0\pos[7:0] [6] -> \pos [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$745 to $_DFFE_PP_ for $0\pos[7:0] [7] -> \pos [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$746 to $_DFFE_PP_ for $0\reset[0:0] -> \reset.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$869 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [0] -> \LCD.pos [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$870 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [1] -> \LCD.pos [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$871 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [2] -> \LCD.pos [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$872 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [3] -> \LCD.pos [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$873 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [4] -> \LCD.pos [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$874 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [5] -> \LCD.pos [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$875 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [6] -> \LCD.pos [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$876 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [7] -> \LCD.pos [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$877 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [8] -> \LCD.pos [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$878 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [9] -> \LCD.pos [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$879 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [10] -> \LCD.pos [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$880 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [11] -> \LCD.pos [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$881 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [12] -> \LCD.pos [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$882 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [13] -> \LCD.pos [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$883 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [14] -> \LCD.pos [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$884 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [15] -> \LCD.pos [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$885 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [16] -> \LCD.pos [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$886 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [17] -> \LCD.pos [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$887 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [18] -> \LCD.pos [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$888 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [19] -> \LCD.pos [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$889 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [20] -> \LCD.pos [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$890 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [21] -> \LCD.pos [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$891 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [22] -> \LCD.pos [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$892 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [23] -> \LCD.pos [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$893 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [24] -> \LCD.pos [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$894 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [25] -> \LCD.pos [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$895 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [26] -> \LCD.pos [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$896 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [27] -> \LCD.pos [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$897 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [28] -> \LCD.pos [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$898 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [29] -> \LCD.pos [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$899 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [30] -> \LCD.pos [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$900 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$356.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1130_Y [31] -> \LCD.pos [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$947 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$245.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1491_Y -> \LCD.LCD_E1.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$948 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$266.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1483_Y [0] -> \LCD.SF_D1 [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$949 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$266.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1483_Y [1] -> \LCD.SF_D1 [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$950 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$266.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1483_Y [2] -> \LCD.SF_D1 [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$951 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$266.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1483_Y [3] -> \LCD.SF_D1 [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$957 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$338.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1245_Y [0] -> \LCD.tx_byte [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$958 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$338.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1245_Y [1] -> \LCD.tx_byte [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$959 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$338.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1245_Y [2] -> \LCD.tx_byte [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$960 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$338.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1245_Y [3] -> \LCD.tx_byte [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$961 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$338.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1245_Y [4] -> \LCD.tx_byte [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$962 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$338.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1245_Y [5] -> \LCD.tx_byte [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$963 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$338.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1245_Y [6] -> \LCD.tx_byte [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$964 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$338.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1245_Y [7] -> \LCD.tx_byte [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$965 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$83.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1514_Y -> \LCD.tx_delay_load.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$966 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [0] -> \LCD.tx_delay_value [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$967 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [1] -> \LCD.tx_delay_value [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$968 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [2] -> \LCD.tx_delay_value [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$969 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [3] -> \LCD.tx_delay_value [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$970 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [4] -> \LCD.tx_delay_value [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$971 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [5] -> \LCD.tx_delay_value [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$972 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [6] -> \LCD.tx_delay_value [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$973 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [7] -> \LCD.tx_delay_value [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$974 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [8] -> \LCD.tx_delay_value [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$975 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [9] -> \LCD.tx_delay_value [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$976 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [10] -> \LCD.tx_delay_value [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$977 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [11] -> \LCD.tx_delay_value [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$978 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [12] -> \LCD.tx_delay_value [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$979 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [13] -> \LCD.tx_delay_value [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$980 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [14] -> \LCD.tx_delay_value [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$981 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [15] -> \LCD.tx_delay_value [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$982 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [16] -> \LCD.tx_delay_value [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$983 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [17] -> \LCD.tx_delay_value [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$984 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [18] -> \LCD.tx_delay_value [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$985 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$103.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1813_Y [19] -> \LCD.tx_delay_value [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$986 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$120.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1491_Y -> \LCD.LCD_E0.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$987 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$130.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1483_Y [0] -> \LCD.SF_D0 [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$988 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$130.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1483_Y [1] -> \LCD.SF_D0 [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$989 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$130.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1483_Y [2] -> \LCD.SF_D0 [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$990 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$130.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1483_Y [3] -> \LCD.SF_D0 [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$991 to $_DFFE_PP_ for $techmap$techmap\LCD.$procmux$135.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1491_Y -> \LCD.tx_done.
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$952 to $__DFFE_PP0 for $techmap$techmap\LCD.$procmux$274.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1435_Y [0] -> \LCD.display_state [0].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$953 to $__DFFE_PP0 for $techmap$techmap\LCD.$procmux$274.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1435_Y [1] -> \LCD.display_state [1].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$954 to $__DFFE_PP0 for $techmap$techmap\LCD.$procmux$274.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1435_Y [2] -> \LCD.display_state [2].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$955 to $__DFFE_PP0 for $techmap$techmap\LCD.$procmux$274.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1435_Y [3] -> \LCD.display_state [3].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$956 to $__DFFE_PP0 for $techmap$techmap\LCD.$procmux$274.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1435_Y [4] -> \LCD.display_state [4].
  converting $_DFF_PP0_ cell $auto$simplemap.cc:496:simplemap_adff$992 to $__DFFE_PP0 for $techmap$techmap\LCD.$procmux$142.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1713_Y [0] -> \LCD.tx_state [0].
  converting $_DFF_PP1_ cell $auto$simplemap.cc:496:simplemap_adff$993 to $__DFFE_PP1 for $techmap$techmap\LCD.$procmux$142.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1713_Y [1] -> \LCD.tx_state [1].
  converting $_DFF_PP1_ cell $auto$simplemap.cc:496:simplemap_adff$994 to $__DFFE_PP1 for $techmap$techmap\LCD.$procmux$142.$ternary$/usr/local/bin/../share/yosys/techmap.v:445$1713_Y [2] -> \LCD.tx_state [2].

5.34. Executing TECHMAP pass (map to technology primitives).

5.34.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

5.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$__DFFE_PP0 for cells of type $__DFFE_PP0.
Using template \$_DFF_PP0_ for cells of type $_DFF_PP0_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$__DFFE_PP1 for cells of type $__DFFE_PP1.
No more expansions possible.
<suppressed ~164 debug messages>

5.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.
<suppressed ~184 debug messages>

5.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

5.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in lcd_top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$989 (SB_DFFE): \LCD.SF_D0 [2] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$994 (SB_DFFES): \LCD.tx_state [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$979 (SB_DFFE): \LCD.tx_delay_value [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$694 (SB_DFF): \count [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$695 (SB_DFF): \count [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$696 (SB_DFF): \count [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$697 (SB_DFF): \count [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$698 (SB_DFF): \count [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$699 (SB_DFF): \count [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$700 (SB_DFF): \count [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$701 (SB_DFF): \count [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$702 (SB_DFF): \count [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$692 (SB_DFF): \count [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$704 (SB_DFF): \count [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$705 (SB_DFF): \count [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$706 (SB_DFF): \count [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$707 (SB_DFF): \count [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$708 (SB_DFF): \count [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$709 (SB_DFF): \count [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$710 (SB_DFF): \count [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$711 (SB_DFF): \count [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$712 (SB_DFF): \count [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$713 (SB_DFF): \count [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$714 (SB_DFF): \count [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$715 (SB_DFF): \count [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$716 (SB_DFF): \count [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$717 (SB_DFF): \count [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$718 (SB_DFF): \count [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$719 (SB_DFF): \count [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$720 (SB_DFF): \count [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$721 (SB_DFF): \count [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$722 (SB_DFF): \count [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$723 (SB_DFF): \count [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$725 (SB_DFFE): \addr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$693 (SB_DFFE): \count [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$727 (SB_DFF): \addr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$730 (SB_DFF): \addr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$728 (SB_DFF): \addr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$729 (SB_DFF): \addr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$726 (SB_DFF): \addr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$734 (SB_DFF): \dat [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$724 (SB_DFF): \addr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$739 (SB_DFFE): \pos [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$731 (SB_DFF): \dat [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$740 (SB_DFFE): \pos [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$741 (SB_DFFE): \pos [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$742 (SB_DFFE): \pos [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$743 (SB_DFFE): \pos [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$744 (SB_DFFE): \pos [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$745 (SB_DFFE): \pos [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$870 (SB_DFFE): \LCD.pos [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$738 (SB_DFFE): \pos [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$872 (SB_DFFE): \LCD.pos [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$875 (SB_DFFE): \LCD.pos [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$873 (SB_DFFE): \LCD.pos [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$874 (SB_DFFE): \LCD.pos [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$871 (SB_DFFE): \LCD.pos [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$876 (SB_DFFE): \LCD.pos [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$877 (SB_DFFE): \LCD.pos [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$878 (SB_DFFE): \LCD.pos [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$879 (SB_DFFE): \LCD.pos [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$880 (SB_DFFE): \LCD.pos [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$881 (SB_DFFE): \LCD.pos [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$882 (SB_DFFE): \LCD.pos [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$883 (SB_DFFE): \LCD.pos [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$884 (SB_DFFE): \LCD.pos [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$885 (SB_DFFE): \LCD.pos [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$886 (SB_DFFE): \LCD.pos [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$887 (SB_DFFE): \LCD.pos [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$888 (SB_DFFE): \LCD.pos [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$889 (SB_DFFE): \LCD.pos [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$890 (SB_DFFE): \LCD.pos [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$891 (SB_DFFE): \LCD.pos [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$895 (SB_DFFE): \LCD.pos [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$976 (SB_DFFE): \LCD.tx_delay_value [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$978 (SB_DFFE): \LCD.tx_delay_value [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$972 (SB_DFFE): \LCD.tx_delay_value [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$973 (SB_DFFE): \LCD.tx_delay_value [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$984 (SB_DFFE): \LCD.tx_delay_value [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$896 (SB_DFFE): \LCD.pos [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$897 (SB_DFFE): \LCD.pos [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$898 (SB_DFFE): \LCD.pos [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$970 (SB_DFFE): \LCD.tx_delay_value [4] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$926 (SB_DFFR): \LCD.main_delay_load = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$947 (SB_DFFE): \LCD.LCD_E1 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$950 (SB_DFFE): \LCD.SF_D1 [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$951 (SB_DFFE): \LCD.SF_D1 [3] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$953 (SB_DFFER): \LCD.display_state [1] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$952 (SB_DFFER): \LCD.display_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$967 (SB_DFFE): \LCD.tx_delay_value [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$965 (SB_DFFE): \LCD.tx_delay_load = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$968 (SB_DFFE): \LCD.tx_delay_value [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$969 (SB_DFFE): \LCD.tx_delay_value [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$974 (SB_DFFE): \LCD.tx_delay_value [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$971 (SB_DFFE): \LCD.tx_delay_value [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$983 (SB_DFFE): \LCD.tx_delay_value [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$893 (SB_DFFE): \LCD.pos [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$980 (SB_DFFE): \LCD.tx_delay_value [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$899 (SB_DFFE): \LCD.pos [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$892 (SB_DFFE): \LCD.pos [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$982 (SB_DFFE): \LCD.tx_delay_value [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$975 (SB_DFFE): \LCD.tx_delay_value [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$900 (SB_DFFE): \LCD.pos [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$703 (SB_DFF): \count [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$981 (SB_DFFE): \LCD.tx_delay_value [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$977 (SB_DFFE): \LCD.tx_delay_value [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$894 (SB_DFFE): \LCD.pos [25] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$928 (SB_DFFR): \LCD.main_delay_value [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$869 (SB_DFFE): \LCD.pos [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$966 (SB_DFFE): \LCD.tx_delay_value [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$986 (SB_DFFE): \LCD.LCD_E0 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$985 (SB_DFFE): \LCD.tx_delay_value [19] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$992 (SB_DFFER): \LCD.tx_state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$987 (SB_DFFE): \LCD.SF_D0 [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$988 (SB_DFFE): \LCD.SF_D0 [1] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$930 (SB_DFFR): \LCD.main_delay_value [3] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$931 (SB_DFFR): \LCD.main_delay_value [4] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$932 (SB_DFFR): \LCD.main_delay_value [5] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$933 (SB_DFFR): \LCD.main_delay_value [6] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$934 (SB_DFFR): \LCD.main_delay_value [7] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$935 (SB_DFFR): \LCD.main_delay_value [8] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$936 (SB_DFFR): \LCD.main_delay_value [9] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$937 (SB_DFFR): \LCD.main_delay_value [10] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$939 (SB_DFFR): \LCD.main_delay_value [12] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$941 (SB_DFFR): \LCD.main_delay_value [14] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$943 (SB_DFFR): \LCD.main_delay_value [16] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$944 (SB_DFFR): \LCD.main_delay_value [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$949 (SB_DFFE): \LCD.SF_D1 [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$948 (SB_DFFE): \LCD.SF_D1 [0] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$954 (SB_DFFER): \LCD.display_state [2] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$955 (SB_DFFER): \LCD.display_state [3] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$956 (SB_DFFER): \LCD.display_state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$746 (SB_DFFE): \reset = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$991 (SB_DFFE): \LCD.tx_done = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$990 (SB_DFFE): \LCD.SF_D0 [3] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$993 (SB_DFFES): \LCD.tx_state [1] = 1

5.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in lcd_top.
  Merging $auto$simplemap.cc:277:simplemap_mux$674 (A=1'1, B=$auto$wreduce.cc:455:run$431 [6], S=$auto$simplemap.cc:256:simplemap_eqne$648) into $auto$simplemap.cc:420:simplemap_dff$734 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$685 (A=1'0, B=$procmux$378_Y [1], S=$auto$simplemap.cc:256:simplemap_eqne$594) into $auto$simplemap.cc:420:simplemap_dff$739 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$686 (A=1'0, B=$procmux$378_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$594) into $auto$simplemap.cc:420:simplemap_dff$740 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$687 (A=1'0, B=$procmux$378_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$594) into $auto$simplemap.cc:420:simplemap_dff$741 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$688 (A=1'0, B=$procmux$378_Y [4], S=$auto$simplemap.cc:256:simplemap_eqne$594) into $auto$simplemap.cc:420:simplemap_dff$742 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$689 (A=1'0, B=$procmux$378_Y [5], S=$auto$simplemap.cc:256:simplemap_eqne$594) into $auto$simplemap.cc:420:simplemap_dff$743 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$690 (A=1'0, B=$procmux$378_Y [6], S=$auto$simplemap.cc:256:simplemap_eqne$594) into $auto$simplemap.cc:420:simplemap_dff$744 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$691 (A=1'0, B=$procmux$378_Y [7], S=$auto$simplemap.cc:256:simplemap_eqne$594) into $auto$simplemap.cc:420:simplemap_dff$745 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$684 (A=1'0, B=$procmux$378_Y [0], S=$auto$simplemap.cc:256:simplemap_eqne$594) into $auto$simplemap.cc:420:simplemap_dff$738 (SB_DFFE).

5.39. Executing ICE40_OPT pass (performing simple optimizations).

5.39.1. Running ICE40 specific optimizations.

5.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.
<suppressed ~86 debug messages>

5.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
<suppressed ~108 debug messages>
Removed a total of 36 cells.

5.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

5.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..
Removed 9 unused cells and 826 unused wires.
<suppressed ~10 debug messages>

5.39.6. Rerunning OPT passes. (Removed registers in this run.)

5.39.7. Running ICE40 specific optimizations.

5.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lcd_top.

5.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lcd_top'.
Removed a total of 0 cells.

5.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

5.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lcd_top..

5.39.12. Finished OPT passes. (There is nothing left to do.)

5.40. Executing TECHMAP pass (map to technology primitives).

5.40.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

5.40.2. Continuing TECHMAP pass.
No more expansions possible.

5.41. Executing ABC pass (technology mapping using ABC).

5.41.1. Extracting gate netlist of module `\lcd_top' to `<abc-temp-dir>/input.blif'..
Extracted 1394 gates and 1625 wires to a netlist network with 229 inputs and 178 outputs.

5.41.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     214.
ABC: Participating nodes from both networks       =     547.
ABC: Participating nodes from the first network   =     216. (  61.19 % of nodes)
ABC: Participating nodes from the second network  =     331. (  93.77 % of nodes)
ABC: Node pairs (any polarity)                    =     216. (  61.19 % of names can be moved)
ABC: Node pairs (same polarity)                   =     202. (  57.22 % of names can be moved)
ABC: Total runtime =     0.03 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

5.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      352
ABC RESULTS:        internal signals:     1218
ABC RESULTS:           input signals:      229
ABC RESULTS:          output signals:      178
Removing temp directory.
Removed 0 unused cells and 657 unused wires.

5.42. Executing ICE40_UNLUT pass (convert SB_LUT4 to $lut).
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[0].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[10].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[11].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[12].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[13].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[14].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[15].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[16].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[17].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[18].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[19].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[20].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[21].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[22].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[23].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[24].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[25].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[26].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[27].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[28].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[29].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[2].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[30].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[31].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[3].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[4].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[5].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[6].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[7].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[8].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$461.slice[9].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$464.slice[0].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$464.slice[2].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$464.slice[3].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$464.slice[4].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$464.slice[5].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$464.slice[6].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$464.slice[7].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$464.slice[8].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$467.slice[0].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$467.slice[2].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$467.slice[3].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$467.slice[4].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$467.slice[5].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$467.slice[6].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[0].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[10].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[11].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[12].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[13].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[14].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[15].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[16].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[17].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[18].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[19].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[20].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[21].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[22].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[23].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[24].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[25].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[26].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[27].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[28].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[29].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[2].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[30].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[31].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[3].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[4].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[5].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[6].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[7].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[8].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$470.slice[9].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[0].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[10].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[11].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[12].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[13].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[14].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[15].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[16].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[17].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[18].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[19].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[2].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[3].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[4].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[5].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[6].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[7].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[8].adder to $lut.
Mapping SB_LUT4 cell lcd_top.$auto$alumacc.cc:474:replace_alu$473.slice[9].adder to $lut.

5.42.1. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      444
  1-LUT               40
  2-LUT               94
  3-LUT              166
  4-LUT              144
  with \SB_CARRY      85

Eliminating LUTs.
Number of LUTs:      443
  1-LUT               39
  2-LUT               94
  3-LUT              166
  4-LUT              144
  with \SB_CARRY      85

Combining LUTs.
Number of LUTs:      440
  1-LUT               37
  2-LUT               93
  3-LUT              166
  4-LUT              144
  with \SB_CARRY      85

Eliminated 1 LUTs.
Combined 3 LUTs.
<suppressed ~2282 debug messages>

5.42.2. Executing TECHMAP pass (map to technology primitives).

5.42.2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

5.42.2.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000100011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111111101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111101001110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
No more expansions possible.
<suppressed ~1419 debug messages>
Removed 0 unused cells and 883 unused wires.

5.42.3. Executing HIERARCHY pass (managing design hierarchy).

5.42.3.1. Analyzing design hierarchy..
Top module:  \lcd_top

5.42.3.2. Analyzing design hierarchy..
Top module:  \lcd_top
Removed 0 unused modules.

5.42.4. Printing statistics.

=== lcd_top ===

   Number of wires:                453
   Number of wire bits:            827
   Number of public wires:          47
   Number of public wire bits:     245
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                726
     SB_CARRY                      121
     SB_DFF                         57
     SB_DFFE                        76
     SB_DFFER                        8
     SB_DFFESR                       8
     SB_DFFR                        14
     SB_DFFSS                        1
     SB_LUT4                       440
     SB_RAM40_4K                     1

5.42.5. Executing CHECK pass (checking for obvious problems).
checking module lcd_top..
found and reported 0 problems.

5.42.6. Executing JSON backend.

Warnings: 20 unique messages, 20 total
End of script. Logfile hash: 9ff12b56c7
CPU: user 1.84s system 0.04s, MEM: 59.13 MB total, 26.87 MB resident
Yosys 0.8+612 (git sha1 c6d8692c, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 18% 20x opt_expr (0 sec), 16% 21x opt_clean (0 sec), ...
