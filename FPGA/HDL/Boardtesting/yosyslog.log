
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 4c89a4e6, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Parsing `boardtest.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: boardtest.v
Parsing Verilog input from `boardtest.v' to AST representation.
Generating RTLIL representation for module `\boardtest'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top boardtest -json yosysout.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \boardtest

2.2.2. Analyzing design hierarchy..
Top module:  \boardtest
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\boardtest.$proc$boardtest.v:31$25'.
  Set init value: \lastlastin = 1'0
Found init rule in `\boardtest.$proc$boardtest.v:31$24'.
  Set init value: \lastin = 1'0
Found init rule in `\boardtest.$proc$boardtest.v:30$23'.
  Set init value: \cnt = 23'00000000000000000000000
Found init rule in `\boardtest.$proc$boardtest.v:19$20'.
  Set init value: \SCLK = 1'0
Found init rule in `\boardtest.$proc$boardtest.v:17$18'.
  Set init value: \REFOUT = 1'0
Found init rule in `\boardtest.$proc$boardtest.v:16$17'.
  Set init value: \Y_T = 1'0
Found init rule in `\boardtest.$proc$boardtest.v:15$16'.
  Set init value: \X_R = 1'0
Found init rule in `\boardtest.$proc$boardtest.v:10$15'.
  Set init value: \L3 = 1'0
Found init rule in `\boardtest.$proc$boardtest.v:9$14'.
  Set init value: \L2 = 1'0
Found init rule in `\boardtest.$proc$boardtest.v:8$13'.
  Set init value: \L1 = 1'0
Found init rule in `\boardtest.$proc$boardtest.v:7$12'.
  Set init value: \L0 = 1'1

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\boardtest.$proc$boardtest.v:31$25'.
     1/1: $1\lastlastin[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:31$24'.
     1/1: $1\lastin[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:30$23'.
     1/1: $1\cnt[22:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:21$22'.
     1/1: $0\CONVST[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:20$21'.
     1/1: $0\SDO[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:19$20'.
     1/1: $1\SCLK[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:18$19'.
     1/1: $0\SDI[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:17$18'.
     1/1: $1\REFOUT[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:16$17'.
     1/1: $1\Y_T[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:15$16'.
     1/1: $1\X_R[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:10$15'.
     1/1: $1\L3[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:9$14'.
     1/1: $1\L2[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:8$13'.
     1/1: $1\L1[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:7$12'.
     1/1: $1\L0[0:0]
Creating decoders for process `\boardtest.$proc$boardtest.v:35$1'.
     1/11: $0\L1[0:0]
     2/11: $0\cnt[22:0]
     3/11: $0\lastlastin[0:0]
     4/11: $0\lastin[0:0]
     5/11: $0\REFOUT[0:0]
     6/11: $0\Y_T[0:0]
     7/11: $0\L3[0:0]
     8/11: $0\L2[0:0]
     9/11: $0\SCLK[0:0]
    10/11: $0\X_R[0:0]
    11/11: $0\L0[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\boardtest.\CONVST' from process `\boardtest.$proc$boardtest.v:21$22'.
No latch inferred for signal `\boardtest.\SDO' from process `\boardtest.$proc$boardtest.v:20$21'.
No latch inferred for signal `\boardtest.\SDI' from process `\boardtest.$proc$boardtest.v:18$19'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\boardtest.\L3' using process `\boardtest.$proc$boardtest.v:35$1'.
  created $dff cell `$procdff$40' with positive edge clock.
Creating register for signal `\boardtest.\X_R' using process `\boardtest.$proc$boardtest.v:35$1'.
  created $dff cell `$procdff$41' with positive edge clock.
Creating register for signal `\boardtest.\L0' using process `\boardtest.$proc$boardtest.v:35$1'.
  created $dff cell `$procdff$42' with positive edge clock.
Creating register for signal `\boardtest.\L1' using process `\boardtest.$proc$boardtest.v:35$1'.
  created $dff cell `$procdff$43' with positive edge clock.
Creating register for signal `\boardtest.\L2' using process `\boardtest.$proc$boardtest.v:35$1'.
  created $dff cell `$procdff$44' with positive edge clock.
Creating register for signal `\boardtest.\Y_T' using process `\boardtest.$proc$boardtest.v:35$1'.
  created $dff cell `$procdff$45' with positive edge clock.
Creating register for signal `\boardtest.\REFOUT' using process `\boardtest.$proc$boardtest.v:35$1'.
  created $dff cell `$procdff$46' with positive edge clock.
Creating register for signal `\boardtest.\SCLK' using process `\boardtest.$proc$boardtest.v:35$1'.
  created $dff cell `$procdff$47' with positive edge clock.
Creating register for signal `\boardtest.\cnt' using process `\boardtest.$proc$boardtest.v:35$1'.
  created $dff cell `$procdff$48' with positive edge clock.
Creating register for signal `\boardtest.\lastin' using process `\boardtest.$proc$boardtest.v:35$1'.
  created $dff cell `$procdff$49' with positive edge clock.
Creating register for signal `\boardtest.\lastlastin' using process `\boardtest.$proc$boardtest.v:35$1'.
  created $dff cell `$procdff$50' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `boardtest.$proc$boardtest.v:31$25'.
Removing empty process `boardtest.$proc$boardtest.v:31$24'.
Removing empty process `boardtest.$proc$boardtest.v:30$23'.
Removing empty process `boardtest.$proc$boardtest.v:21$22'.
Removing empty process `boardtest.$proc$boardtest.v:20$21'.
Removing empty process `boardtest.$proc$boardtest.v:19$20'.
Removing empty process `boardtest.$proc$boardtest.v:18$19'.
Removing empty process `boardtest.$proc$boardtest.v:17$18'.
Removing empty process `boardtest.$proc$boardtest.v:16$17'.
Removing empty process `boardtest.$proc$boardtest.v:15$16'.
Removing empty process `boardtest.$proc$boardtest.v:10$15'.
Removing empty process `boardtest.$proc$boardtest.v:9$14'.
Removing empty process `boardtest.$proc$boardtest.v:8$13'.
Removing empty process `boardtest.$proc$boardtest.v:7$12'.
Found and cleaned up 4 empty switches in `\boardtest.$proc$boardtest.v:35$1'.
Removing empty process `boardtest.$proc$boardtest.v:35$1'.
Cleaned up 4 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.
<suppressed ~2 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..
Removed 2 unused cells and 33 unused wires.
<suppressed ~3 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module boardtest..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \boardtest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \boardtest.
    New input vector for $reduce_and cell $reduce_and$boardtest.v:40$6: { \cnt [0] \cnt [1] \cnt [2] \cnt [3] \cnt [4] \cnt [5] \cnt [6] \cnt [7] \cnt [8] \cnt [9] \cnt [10] \cnt [11] \cnt [12] \cnt [13] \cnt [14] \cnt [15] \cnt [16] \cnt [17] \cnt [18] \cnt [19] \cnt [20] \cnt [21] \cnt [22] }
  Optimizing cells in module \boardtest.
Performed a total of 1 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \boardtest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \boardtest.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell boardtest.$add$boardtest.v:39$5 ($add).
Removed top 9 bits (of 32) from port Y of cell boardtest.$add$boardtest.v:39$5 ($add).

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
No more expansions possible.

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module boardtest:
  creating $macc model for $add$boardtest.v:39$5 ($add).
  creating $alu model for $macc $add$boardtest.v:39$5.
  creating $alu cell for $add$boardtest.v:39$5: $auto$alumacc.cc:474:replace_alu$51
  created 1 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \boardtest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \boardtest.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \boardtest..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \boardtest.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=23\Y_WIDTH=23 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~45 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.
<suppressed ~45 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..
Removed 25 unused cells and 18 unused wires.
<suppressed ~26 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell boardtest.$auto$alumacc.cc:474:replace_alu$51.slice[0].carry: CO=\cnt [0]
Mapping SB_LUT4 cell boardtest.$auto$alumacc.cc:474:replace_alu$51.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.
<suppressed ~13 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..

2.31.18. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module boardtest:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$145 to $_DFFE_PP_ for $0\L3[0:0] -> \L3.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$148 to $_DFFE_PP_ for $0\X_R[0:0] -> \X_R.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$149 to $_DFFE_PP_ for $0\L0[0:0] -> \L0.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$150 to $_DFFE_PP_ for $0\L1[0:0] -> \L1.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$151 to $_DFFE_PP_ for $0\L2[0:0] -> \L2.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$152 to $_DFFE_PP_ for $0\Y_T[0:0] -> \Y_T.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$153 to $_DFFE_PP_ for $0\REFOUT[0:0] -> \REFOUT.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$156 to $_DFFE_PP_ for $0\cnt[22:0] [1] -> \cnt [1].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~33 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.
<suppressed ~14 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in boardtest.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$177 (SB_DFF): \cnt [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$153 (SB_DFFE): \REFOUT = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$148 (SB_DFFE): \X_R = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$149 (SB_DFFE): \L0 = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$150 (SB_DFFE): \L1 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$151 (SB_DFFE): \L2 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$145 (SB_DFFE): \L3 = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$161 (SB_DFF): \cnt [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$154 (SB_DFF): \SCLK = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$179 (SB_DFF): \lastlastin = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$156 (SB_DFFE): \cnt [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$157 (SB_DFF): \cnt [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$158 (SB_DFF): \cnt [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$159 (SB_DFF): \cnt [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$152 (SB_DFFE): \Y_T = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$160 (SB_DFF): \cnt [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$162 (SB_DFF): \cnt [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$163 (SB_DFF): \cnt [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$164 (SB_DFF): \cnt [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$165 (SB_DFF): \cnt [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$166 (SB_DFF): \cnt [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$167 (SB_DFF): \cnt [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$168 (SB_DFF): \cnt [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$169 (SB_DFF): \cnt [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$170 (SB_DFF): \cnt [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$171 (SB_DFF): \cnt [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$172 (SB_DFF): \cnt [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$173 (SB_DFF): \cnt [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$174 (SB_DFF): \cnt [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$175 (SB_DFF): \cnt [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$176 (SB_DFF): \cnt [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$155 (SB_DFF): \cnt [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$178 (SB_DFF): \lastin = 0

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in boardtest.

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module boardtest.

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\boardtest'.
Removed a total of 0 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \boardtest..
Removed 0 unused cells and 129 unused wires.
<suppressed ~1 debug messages>

2.39.6. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\boardtest' to `<abc-temp-dir>/input.blif'..
Extracted 33 gates and 67 wires to a netlist network with 33 inputs and 11 outputs.

2.41.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      17.
ABC: Participating nodes from both networks       =      33.
ABC: Participating nodes from the first network   =      16. (  84.21 % of nodes)
ABC: Participating nodes from the second network  =      17. (  89.47 % of nodes)
ABC: Node pairs (any polarity)                    =      16. (  84.21 % of names can be moved)
ABC: Node pairs (same polarity)                   =      16. (  84.21 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       36
ABC RESULTS:        internal signals:       23
ABC RESULTS:           input signals:       33
ABC RESULTS:          output signals:       11
Removing temp directory.
Removed 0 unused cells and 49 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
No more expansions possible.
<suppressed ~62 debug messages>
Removed 0 unused cells and 36 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \boardtest

2.43.2. Analyzing design hierarchy..
Top module:  \boardtest
Removed 0 unused modules.

2.44. Printing statistics.

=== boardtest ===

   Number of wires:                 39
   Number of wire bits:            105
   Number of public wires:          20
   Number of public wire bits:      42
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 94
     SB_CARRY                       21
     SB_DFF                         25
     SB_DFFE                         8
     SB_LUT4                        40

2.45. Executing CHECK pass (checking for obvious problems).
checking module boardtest..
found and reported 0 problems.

2.46. Executing JSON backend.

End of script. Logfile hash: 4557dbe450
CPU: user 0.35s system 0.03s, MEM: 72.79 MB total, 41.10 MB resident
Yosys 0.9 (git sha1 4c89a4e6, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 41% 10x read_verilog (0 sec), 11% 1x share (0 sec), ...
