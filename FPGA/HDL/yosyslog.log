
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+612 (git sha1 c6d8692c, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Parsing `top.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

-- Parsing `sram16x16.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: sram16x16.v
Parsing Verilog input from `sram16x16.v' to AST representation.
Generating RTLIL representation for module `\sram16x16'.
Successfully finished Verilog frontend.

-- Parsing `Flash_to_SRAM.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: Flash_to_SRAM.v
Parsing Verilog input from `Flash_to_SRAM.v' to AST representation.
Generating RTLIL representation for module `\Flash_to_SRAM'.
Successfully finished Verilog frontend.

-- Parsing `spi_flash_reader.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: spi_flash_reader.v
Parsing Verilog input from `spi_flash_reader.v' to AST representation.
Generating RTLIL representation for module `\spi_flash_reader'.
Successfully finished Verilog frontend.

-- Parsing `sigma_delta.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: sigma_delta.v
Parsing Verilog input from `sigma_delta.v' to AST representation.
Generating RTLIL representation for module `\sigma_delta'.
Successfully finished Verilog frontend.

-- Parsing `dds.v' using frontend `verilog' --

6. Executing Verilog-2005 frontend: dds.v
Parsing Verilog input from `dds.v' to AST representation.
Generating RTLIL representation for module `\dds'.
Successfully finished Verilog frontend.

-- Parsing `mult16x16.v' using frontend `verilog' --

7. Executing Verilog-2005 frontend: mult16x16.v
Parsing Verilog input from `mult16x16.v' to AST representation.
Generating RTLIL representation for module `\mult16x16'.
Successfully finished Verilog frontend.

-- Parsing `pll.v' using frontend `verilog' --

8. Executing Verilog-2005 frontend: pll.v
Parsing Verilog input from `pll.v' to AST representation.
Generating RTLIL representation for module `\pll'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json yosysout.json' --

9. Executing SYNTH_ICE40 pass.

9.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `$__ICE40_FULL_ADDER'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

9.2. Executing HIERARCHY pass (managing design hierarchy).

9.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \pll
Used module:     \sigma_delta
Used module:     \dds
Used module:     \Flash_to_SRAM
Used module:         \spi_flash_reader
Used module:     \sram16x16

9.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \pll
Used module:     \sigma_delta
Used module:     \dds
Used module:     \Flash_to_SRAM
Used module:         \spi_flash_reader
Used module:     \sram16x16
Removing unused module `\mult16x16'.
Removed 1 unused modules.
Mapping positional arguments of cell top.pll1 (pll).
Mapping positional arguments of cell top.DAC2 (sigma_delta).
Mapping positional arguments of cell top.DAC1 (sigma_delta).
Mapping positional arguments of cell top.dds_core (dds).
Mapping positional arguments of cell top.F2SRAM (Flash_to_SRAM).
Mapping positional arguments of cell top.SRAM (sram16x16).
Warning: Resizing cell port top.DAC2.dac_val from 15 bits to 16 bits.
Warning: Resizing cell port top.DAC1.dac_val from 15 bits to 16 bits.

9.3. Executing PROC pass (convert processes to netlists).

9.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 4 dead cases from process $proc$dds.v:21$92 in module dds.
Marked 4 switch rules as full_case in process $proc$dds.v:21$92 in module dds.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:187$72 in module spi_flash_reader.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:174$68 in module spi_flash_reader.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:166$64 in module spi_flash_reader.
Marked 2 switch rules as full_case in process $proc$spi_flash_reader.v:155$59 in module spi_flash_reader.
Marked 2 switch rules as full_case in process $proc$spi_flash_reader.v:141$57 in module spi_flash_reader.
Removed 1 dead cases from process $proc$spi_flash_reader.v:112$54 in module spi_flash_reader.
Marked 5 switch rules as full_case in process $proc$spi_flash_reader.v:112$54 in module spi_flash_reader.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:104$52 in module spi_flash_reader.
Removed a total of 5 dead cases.

9.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 33 assignments to connections.

9.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\pll.$proc$pll.v:24$121'.
  Set init value: \l2_in = 1'0
Found init rule in `\pll.$proc$pll.v:24$120'.
  Set init value: \l_in = 1'0
Found init rule in `\pll.$proc$pll.v:22$119'.
  Set init value: \incr = 17'00000001001011000
Found init rule in `\pll.$proc$pll.v:19$118'.
  Set init value: \phase = 0
Found init rule in `\pll.$proc$pll.v:12$117'.
  Set init value: \locked = 1'0
Found init rule in `\dds.$proc$dds.v:19$102'.
  Set init value: \islast = 1'0
Found init rule in `\dds.$proc$dds.v:19$101'.
  Set init value: \lastgo = 1'0
Found init rule in `\dds.$proc$dds.v:19$100'.
  Set init value: \iscos = 1'0
Found init rule in `\sigma_delta.$proc$sigma_delta.v:13$91'.
  Set init value: \acc = 17'00000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$51'.
  Set init value: \spi_go = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:35$49'.
  Set init value: \spi_addr = 24'000000000000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$48'.
  Set init value: \second = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$47'.
  Set init value: \laststart = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:30$46'.
  Set init value: \poscount = 16'0000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:24$45'.
  Set init value: \wdata = 16'0000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:20$44'.
  Set init value: \addr = 16'0000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:19$43'.
  Set init value: \wen = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:10$42'.
  Set init value: \busy = 1'0
Found init rule in `\top.$proc$top.v:26$15'.
  Set init value: \loadlookup = 1'0
Found init rule in `\top.$proc$top.v:26$14'.
  Set init value: \rst = 1'0
Found init rule in `\top.$proc$top.v:25$13'.
  Set init value: \sweep = 18'000000000000000000
Found init rule in `\top.$proc$top.v:24$12'.
  Set init value: \count = 0

9.3.5. Executing PROC_ARST pass (detect async resets in processes).

9.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pll.$proc$pll.v:24$121'.
Creating decoders for process `\pll.$proc$pll.v:24$120'.
Creating decoders for process `\pll.$proc$pll.v:22$119'.
Creating decoders for process `\pll.$proc$pll.v:19$118'.
Creating decoders for process `\pll.$proc$pll.v:12$117'.
Creating decoders for process `\pll.$proc$pll.v:37$107'.
     1/4: $0\phase[31:0]
     2/4: $0\locked[0:0]
     3/4: $0\last_eP[15:0]
     4/4: $0\incr[16:0]
Creating decoders for process `\dds.$proc$dds.v:19$102'.
Creating decoders for process `\dds.$proc$dds.v:19$101'.
Creating decoders for process `\dds.$proc$dds.v:19$100'.
Creating decoders for process `\dds.$proc$dds.v:21$92'.
     1/5: $0\islast[0:0]
     2/5: $0\iscos[0:0]
     3/5: $0\cos[15:0]
     4/5: $0\sin[15:0]
     5/5: $0\addr[15:0]
Creating decoders for process `\sigma_delta.$proc$sigma_delta.v:13$91'.
Creating decoders for process `\sigma_delta.$proc$sigma_delta.v:17$89'.
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:201$78'.
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:187$72'.
     1/1: $0\rdy_i[0:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:174$68'.
     1/1: $0\cnt_len[17:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:166$64'.
     1/1: $0\cnt_cmd[1:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:155$59'.
     1/2: $0\cnt_bit_last[0:0]
     2/2: $0\cnt_bit[2:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:141$57'.
     1/1: $0\shift_reg[31:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:112$54'.
     1/5: $5\fsm_state_next[1:0]
     2/5: $4\fsm_state_next[1:0]
     3/5: $3\fsm_state_next[1:0]
     4/5: $2\fsm_state_next[1:0]
     5/5: $1\fsm_state_next[1:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:104$52'.
     1/1: $0\fsm_state[1:0]
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$51'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:36$50'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:35$49'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$48'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$47'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:30$46'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:24$45'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:20$44'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:19$43'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:10$42'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
     1/9: $0\wen[0:0]
     2/9: $0\spi_go[0:0]
     3/9: $0\spi_addr[23:0]
     4/9: $0\f_byte[7:0]
     5/9: $0\second[0:0]
     6/9: $0\poscount[15:0]
     7/9: $0\wdata[15:0]
     8/9: $0\addr[15:0]
     9/9: $0\busy[0:0]
Creating decoders for process `\top.$proc$top.v:26$15'.
Creating decoders for process `\top.$proc$top.v:26$14'.
Creating decoders for process `\top.$proc$top.v:25$13'.
Creating decoders for process `\top.$proc$top.v:24$12'.
Creating decoders for process `\top.$proc$top.v:55$5'.
     1/1: $0\loadlookup[0:0]

9.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\spi_flash_reader.\fsm_state_next' from process `\spi_flash_reader.$proc$spi_flash_reader.v:112$54'.
No latch inferred for signal `\Flash_to_SRAM.\spi_len' from process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:36$50'.

9.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pll.\phase' using process `\pll.$proc$pll.v:37$107'.
  created $dff cell `$procdff$287' with positive edge clock.
Creating register for signal `\pll.\locked' using process `\pll.$proc$pll.v:37$107'.
  created $dff cell `$procdff$288' with positive edge clock.
Creating register for signal `\pll.\incr' using process `\pll.$proc$pll.v:37$107'.
  created $dff cell `$procdff$289' with positive edge clock.
Creating register for signal `\pll.\l_in' using process `\pll.$proc$pll.v:37$107'.
  created $dff cell `$procdff$290' with positive edge clock.
Creating register for signal `\pll.\l2_in' using process `\pll.$proc$pll.v:37$107'.
  created $dff cell `$procdff$291' with positive edge clock.
Creating register for signal `\pll.\last_eP' using process `\pll.$proc$pll.v:37$107'.
  created $dff cell `$procdff$292' with positive edge clock.
Creating register for signal `\dds.\addr' using process `\dds.$proc$dds.v:21$92'.
  created $dff cell `$procdff$293' with positive edge clock.
Creating register for signal `\dds.\sin' using process `\dds.$proc$dds.v:21$92'.
  created $dff cell `$procdff$294' with positive edge clock.
Creating register for signal `\dds.\cos' using process `\dds.$proc$dds.v:21$92'.
  created $dff cell `$procdff$295' with positive edge clock.
Creating register for signal `\dds.\iscos' using process `\dds.$proc$dds.v:21$92'.
  created $dff cell `$procdff$296' with positive edge clock.
Creating register for signal `\dds.\lastgo' using process `\dds.$proc$dds.v:21$92'.
  created $dff cell `$procdff$297' with positive edge clock.
Creating register for signal `\dds.\islast' using process `\dds.$proc$dds.v:21$92'.
  created $dff cell `$procdff$298' with positive edge clock.
Creating register for signal `\sigma_delta.\acc' using process `\sigma_delta.$proc$sigma_delta.v:17$89'.
  created $dff cell `$procdff$299' with positive edge clock.
Creating register for signal `\spi_flash_reader.\valid_i' using process `\spi_flash_reader.$proc$spi_flash_reader.v:201$78'.
  created $dff cell `$procdff$300' with positive edge clock.
Creating register for signal `\spi_flash_reader.\rdy_i' using process `\spi_flash_reader.$proc$spi_flash_reader.v:187$72'.
  created $dff cell `$procdff$301' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_len' using process `\spi_flash_reader.$proc$spi_flash_reader.v:174$68'.
  created $dff cell `$procdff$302' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_cmd' using process `\spi_flash_reader.$proc$spi_flash_reader.v:166$64'.
  created $dff cell `$procdff$303' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_bit' using process `\spi_flash_reader.$proc$spi_flash_reader.v:155$59'.
  created $dff cell `$procdff$304' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_bit_last' using process `\spi_flash_reader.$proc$spi_flash_reader.v:155$59'.
  created $dff cell `$procdff$305' with positive edge clock.
Creating register for signal `\spi_flash_reader.\shift_reg' using process `\spi_flash_reader.$proc$spi_flash_reader.v:141$57'.
  created $dff cell `$procdff$306' with positive edge clock.
Creating register for signal `\spi_flash_reader.\fsm_state' using process `\spi_flash_reader.$proc$spi_flash_reader.v:104$52'.
  created $dff cell `$procdff$307' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\wen' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
  created $dff cell `$procdff$308' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\busy' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
  created $dff cell `$procdff$309' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\addr' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
  created $dff cell `$procdff$310' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\wdata' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
  created $dff cell `$procdff$311' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\poscount' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
  created $dff cell `$procdff$312' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\laststart' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
  created $dff cell `$procdff$313' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\second' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
  created $dff cell `$procdff$314' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\f_byte' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
  created $dff cell `$procdff$315' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\spi_addr' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
  created $dff cell `$procdff$316' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\spi_go' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
  created $dff cell `$procdff$317' with positive edge clock.
Creating register for signal `\top.\count' using process `\top.$proc$top.v:55$5'.
  created $dff cell `$procdff$318' with positive edge clock.
Creating register for signal `\top.\sweep' using process `\top.$proc$top.v:55$5'.
  created $dff cell `$procdff$319' with positive edge clock.
Creating register for signal `\top.\rst' using process `\top.$proc$top.v:55$5'.
  created $dff cell `$procdff$320' with positive edge clock.
Creating register for signal `\top.\loadlookup' using process `\top.$proc$top.v:55$5'.
  created $dff cell `$procdff$321' with positive edge clock.

9.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `pll.$proc$pll.v:24$121'.
Removing empty process `pll.$proc$pll.v:24$120'.
Removing empty process `pll.$proc$pll.v:22$119'.
Removing empty process `pll.$proc$pll.v:19$118'.
Removing empty process `pll.$proc$pll.v:12$117'.
Found and cleaned up 2 empty switches in `\pll.$proc$pll.v:37$107'.
Removing empty process `pll.$proc$pll.v:37$107'.
Removing empty process `dds.$proc$dds.v:19$102'.
Removing empty process `dds.$proc$dds.v:19$101'.
Removing empty process `dds.$proc$dds.v:19$100'.
Found and cleaned up 7 empty switches in `\dds.$proc$dds.v:21$92'.
Removing empty process `dds.$proc$dds.v:21$92'.
Removing empty process `sigma_delta.$proc$sigma_delta.v:13$91'.
Removing empty process `sigma_delta.$proc$sigma_delta.v:17$89'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:201$78'.
Found and cleaned up 1 empty switch in `\spi_flash_reader.$proc$spi_flash_reader.v:187$72'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:187$72'.
Found and cleaned up 2 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:174$68'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:174$68'.
Found and cleaned up 2 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:166$64'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:166$64'.
Found and cleaned up 3 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:155$59'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:155$59'.
Found and cleaned up 2 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:141$57'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:141$57'.
Found and cleaned up 5 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:112$54'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:112$54'.
Found and cleaned up 1 empty switch in `\spi_flash_reader.$proc$spi_flash_reader.v:104$52'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:104$52'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$51'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:36$50'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:35$49'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$48'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$47'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:30$46'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:24$45'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:20$44'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:19$43'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:10$42'.
Found and cleaned up 5 empty switches in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$34'.
Removing empty process `top.$proc$top.v:26$15'.
Removing empty process `top.$proc$top.v:26$14'.
Removing empty process `top.$proc$top.v:25$13'.
Removing empty process `top.$proc$top.v:24$12'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:55$5'.
Removing empty process `top.$proc$top.v:55$5'.
Cleaned up 31 empty switches.

9.4. Executing FLATTEN pass (flatten design).
Using template Flash_to_SRAM for cells of type Flash_to_SRAM.
Using template sram16x16 for cells of type sram16x16.
Using template pll for cells of type pll.
Using template dds for cells of type dds.
Using template sigma_delta for cells of type sigma_delta.
Using template spi_flash_reader for cells of type spi_flash_reader.
<suppressed ~7 debug messages>
No more expansions possible.
Deleting now unused module pll.
Deleting now unused module dds.
Deleting now unused module sigma_delta.
Deleting now unused module spi_flash_reader.
Deleting now unused module Flash_to_SRAM.
Deleting now unused module sram16x16.

9.5. Executing TRIBUF pass.

9.6. Executing DEMINOUT pass (demote inout ports to input or output).

9.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~18 debug messages>

9.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 12 unused cells and 154 unused wires.
<suppressed ~18 debug messages>

9.9. Executing CHECK pass (checking for obvious problems).
checking module top..
Warning: Wire top.\HC [15] is used but has no driver.
Warning: Wire top.\HC [14] is used but has no driver.
Warning: Wire top.\HC [13] is used but has no driver.
Warning: Wire top.\HC [12] is used but has no driver.
Warning: Wire top.\HC [11] is used but has no driver.
Warning: Wire top.\HC [10] is used but has no driver.
Warning: Wire top.\HC [9] is used but has no driver.
Warning: Wire top.\HC [8] is used but has no driver.
Warning: Wire top.\HC [7] is used but has no driver.
Warning: Wire top.\HC [6] is used but has no driver.
Warning: Wire top.\HC [5] is used but has no driver.
Warning: Wire top.\HC [4] is used but has no driver.
Warning: Wire top.\HC [3] is used but has no driver.
Warning: Wire top.\HC [2] is used but has no driver.
Warning: Wire top.\HC [1] is used but has no driver.
Warning: Wire top.\HC [0] is used but has no driver.
Warning: Wire top.\HB [2] is used but has no driver.
Warning: Wire top.\HB [1] is used but has no driver.
found and reported 18 problems.

9.10. Executing OPT pass (performing simple optimizations).

9.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~69 debug messages>
Removed a total of 23 cells.

9.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $techmap\dds_core.$procmux$138: \dds_core.islast -> 1'0
      Replacing known input bits on port A of cell $techmap\dds_core.$procmux$142: \dds_core.iscos -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$206.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$212.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$219.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$227.
Removed 4 multiplexer ports.
<suppressed ~32 debug messages>

9.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $techmap\pll1.$reduce_or$pll.v:33$103: { \pll1.phase [25] \pll1.phase [26] \pll1.phase [27] \pll1.phase [28] \pll1.phase [29] \pll1.phase [30] \pll1.phase [31] }
    New input vector for $reduce_and cell $techmap\pll1.$reduce_and$pll.v:39$110: { \pll1.eP [12] \pll1.eP [13] \pll1.eP [14] \pll1.eP [15] }
    New input vector for $reduce_and cell $techmap\pll1.$reduce_and$pll.v:39$109: { $techmap\pll1.$not$pll.v:39$108_Y [0] $techmap\pll1.$not$pll.v:39$108_Y [1] $techmap\pll1.$not$pll.v:39$108_Y [2] $techmap\pll1.$not$pll.v:39$108_Y [3] }
    New input vector for $reduce_and cell $techmap\F2SRAM.$reduce_and$Flash_to_SRAM.v:60$39: { \F2SRAM.poscount [0] \F2SRAM.poscount [1] \F2SRAM.poscount [2] \F2SRAM.poscount [3] \F2SRAM.poscount [4] \F2SRAM.poscount [5] \F2SRAM.poscount [6] \F2SRAM.poscount [7] \F2SRAM.poscount [8] \F2SRAM.poscount [9] \F2SRAM.poscount [10] \F2SRAM.poscount [11] \F2SRAM.poscount [12] \F2SRAM.poscount [13] \F2SRAM.poscount [14] \F2SRAM.poscount [15] }
    New ctrl vector for $pmux cell $techmap\dds_core.$procmux$146: { $auto$opt_reduce.cc:132:opt_mux$325 $auto$opt_reduce.cc:132:opt_mux$323 }
  Optimizing cells in module \top.
Performed a total of 5 changes.

9.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \sweep = 18'000000000000000000 to constant driver in module top.
Promoted 1 init specs to constant drivers.

9.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 27 unused wires.
<suppressed ~1 debug messages>

9.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.10.9. Rerunning OPT passes. (Maybe there is more to do..)

9.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

9.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

9.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

9.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.10.16. Finished OPT passes. (There is nothing left to do.)

9.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port A of cell top.$not$top.v:42$3 ($not).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:58$8 ($add).
Removed top 31 bits (of 32) from port B of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:70$41 ($add).
Removed top 16 bits (of 32) from port Y of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:70$41 ($add).
Removed top 31 bits (of 32) from port B of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:68$40 ($add).
Removed top 16 bits (of 32) from port Y of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:68$40 ($add).
Removed top 12 bits (of 17) from port B of cell top.$techmap\pll1.$add$pll.v:48$116 ($add).
Removed top 10 bits (of 17) from port B of cell top.$techmap\pll1.$sub$pll.v:48$115 ($sub).
Removed top 1 bits (of 16) from port B of cell top.$techmap\pll1.$sub$pll.v:34$104 ($sub).
Removed top 1 bits (of 2) from port B of cell top.$techmap\dds_core.$procmux$149_CMP0 ($eq).
Removed top 1 bits (of 16) from port B of cell top.$techmap\DAC1.$add$sigma_delta.v:18$90 ($add).
Removed top 1 bits (of 16) from port B of cell top.$techmap\DAC2.$add$sigma_delta.v:18$90 ($add).
Removed top 1 bits (of 2) from port B of cell top.$techmap\F2SRAM.SPI_READER.$eq$spi_flash_reader.v:169$65 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$62 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$62 ($add).
Removed top 16 bits (of 32) from wire top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:68$40_Y.
Removed top 16 bits (of 32) from wire top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:70$41_Y.
Removed top 29 bits (of 32) from wire top.$techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$62_Y.

9.12. Executing PEEPOPT pass (run peephole optimizers).

9.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

9.14. Executing SHARE pass (SAT-based resource sharing).

9.15. Executing TECHMAP pass (map to technology primitives).

9.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

9.15.2. Continuing TECHMAP pass.
Using template $paramod$6816abac91a51b405c3de5bceb2855c03dd44485\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$99e5b0ecd4c7f9fb6cd3a733593eba894c42613f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$0760830c1e6c196382cd2cb153e9fff2d84c061d\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~84 debug messages>

9.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

9.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$top.v:58$8 ($add).
  creating $macc model for $techmap\DAC1.$add$sigma_delta.v:18$90 ($add).
  creating $macc model for $techmap\DAC2.$add$sigma_delta.v:18$90 ($add).
  creating $macc model for $techmap\F2SRAM.$add$Flash_to_SRAM.v:68$40 ($add).
  creating $macc model for $techmap\F2SRAM.$add$Flash_to_SRAM.v:70$41 ($add).
  creating $macc model for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$62 ($add).
  creating $macc model for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:170$66 ($add).
  creating $macc model for $techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71 ($sub).
  creating $macc model for $techmap\pll1.$add$pll.v:40$112 ($add).
  creating $macc model for $techmap\pll1.$add$pll.v:48$116 ($add).
  creating $macc model for $techmap\pll1.$sub$pll.v:34$104 ($sub).
  creating $macc model for $techmap\pll1.$sub$pll.v:35$106 ($sub).
  creating $macc model for $techmap\pll1.$sub$pll.v:48$115 ($sub).
  merging $macc model for $techmap\pll1.$sub$pll.v:48$115 into $techmap\pll1.$add$pll.v:48$116.
  creating $alu model for $macc $techmap\pll1.$sub$pll.v:35$106.
  creating $alu model for $macc $techmap\pll1.$sub$pll.v:34$104.
  creating $alu model for $macc $techmap\pll1.$add$pll.v:40$112.
  creating $alu model for $macc $techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71.
  creating $alu model for $macc $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:170$66.
  creating $alu model for $macc $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$62.
  creating $alu model for $macc $techmap\F2SRAM.$add$Flash_to_SRAM.v:70$41.
  creating $alu model for $macc $techmap\F2SRAM.$add$Flash_to_SRAM.v:68$40.
  creating $alu model for $macc $techmap\DAC2.$add$sigma_delta.v:18$90.
  creating $alu model for $macc $techmap\DAC1.$add$sigma_delta.v:18$90.
  creating $alu model for $macc $add$top.v:58$8.
  creating $macc cell for $techmap\pll1.$add$pll.v:48$116: $auto$alumacc.cc:354:replace_macc$341
  creating $alu cell for $add$top.v:58$8: $auto$alumacc.cc:474:replace_alu$342
  creating $alu cell for $techmap\DAC1.$add$sigma_delta.v:18$90: $auto$alumacc.cc:474:replace_alu$345
  creating $alu cell for $techmap\DAC2.$add$sigma_delta.v:18$90: $auto$alumacc.cc:474:replace_alu$348
  creating $alu cell for $techmap\F2SRAM.$add$Flash_to_SRAM.v:68$40: $auto$alumacc.cc:474:replace_alu$351
  creating $alu cell for $techmap\F2SRAM.$add$Flash_to_SRAM.v:70$41: $auto$alumacc.cc:474:replace_alu$354
  creating $alu cell for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$62: $auto$alumacc.cc:474:replace_alu$357
  creating $alu cell for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:170$66: $auto$alumacc.cc:474:replace_alu$360
  creating $alu cell for $techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71: $auto$alumacc.cc:474:replace_alu$363
  creating $alu cell for $techmap\pll1.$add$pll.v:40$112: $auto$alumacc.cc:474:replace_alu$366
  creating $alu cell for $techmap\pll1.$sub$pll.v:34$104: $auto$alumacc.cc:474:replace_alu$369
  creating $alu cell for $techmap\pll1.$sub$pll.v:35$106: $auto$alumacc.cc:474:replace_alu$372
  created 11 $alu and 1 $macc cells.

9.19. Executing OPT pass (performing simple optimizations).

9.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

9.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

9.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

9.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.19.9. Rerunning OPT passes. (Maybe there is more to do..)

9.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

9.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

9.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

9.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.19.16. Finished OPT passes. (There is nothing left to do.)

9.20. Executing FSM pass (extract and optimize FSM).

9.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.F2SRAM.SPI_READER.fsm_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking top.F2SRAM.spi_addr as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

9.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

9.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

9.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

9.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

9.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

9.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

9.21. Executing OPT pass (performing simple optimizations).

9.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

9.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.21.5. Finished fast OPT passes.

9.22. Executing MEMORY pass.

9.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

9.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

9.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

9.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

9.25. Executing TECHMAP pass (map to technology primitives).

9.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

9.25.2. Continuing TECHMAP pass.
No more expansions possible.

9.26. Executing ICE40_BRAMINIT pass.

9.27. Executing OPT pass (performing simple optimizations).

9.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~27 debug messages>

9.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

9.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 5 unused cells and 12 unused wires.
<suppressed ~6 debug messages>

9.27.5. Finished fast OPT passes.

9.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

9.29. Executing OPT pass (performing simple optimizations).

9.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~30 debug messages>

9.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

9.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.29.9. Finished OPT passes. (There is nothing left to do.)

9.30. Executing TECHMAP pass (map to technology primitives).

9.30.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.30.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

9.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=15\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper maccmap for cells of type $macc.
  add \pll1.incr (17 bits, signed)
  add \pll1.eD [15:11] (5 bits, signed)
  sub \pll1.eP [15:9] (7 bits, signed)
  packed 1 (1) bits / 1 words into adder tree
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=17\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=18\B_WIDTH=1\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_fa\WIDTH=17 for cells of type $fa.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=17\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
No more expansions possible.
<suppressed ~496 debug messages>

9.31. Executing ICE40_OPT pass (performing simple optimizations).

9.31.1. Running ICE40 specific optimizations.

9.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~355 debug messages>

9.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

9.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

9.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 341 unused cells and 253 unused wires.
<suppressed ~342 debug messages>

9.31.6. Rerunning OPT passes. (Removed registers in this run.)

9.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$342.slice[0].carry: CO=\count [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$351.slice[0].carry: CO=\F2SRAM.addr [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$354.slice[0].carry: CO=\F2SRAM.poscount [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$357.slice[0].carry: CO=\F2SRAM.SPI_READER.cnt_bit [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$369.slice[0].carry: CO=\pll1.phase [9]
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$342.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[1].adder back to logic.

9.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~102 debug messages>

9.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

9.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

9.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

9.31.12. Rerunning OPT passes. (Removed registers in this run.)

9.31.13. Running ICE40 specific optimizations.

9.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

9.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.31.18. Finished OPT passes. (There is nothing left to do.)

9.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

9.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1073 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [1] -> \dds_core.cos [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1074 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [2] -> \dds_core.cos [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1075 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [3] -> \dds_core.cos [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1076 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [4] -> \dds_core.cos [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1077 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [5] -> \dds_core.cos [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1078 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [6] -> \dds_core.cos [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1079 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [7] -> \dds_core.cos [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1080 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [8] -> \dds_core.cos [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1081 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [9] -> \dds_core.cos [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1082 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [10] -> \dds_core.cos [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1083 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [11] -> \dds_core.cos [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1084 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [12] -> \dds_core.cos [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1085 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [13] -> \dds_core.cos [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1086 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [14] -> \dds_core.cos [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1087 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [15] -> \dds_core.cos [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1089 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [1] -> \dds_core.sin [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1090 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [2] -> \dds_core.sin [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1091 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [3] -> \dds_core.sin [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1092 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [4] -> \dds_core.sin [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1093 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [5] -> \dds_core.sin [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1094 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [6] -> \dds_core.sin [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1095 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [7] -> \dds_core.sin [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1096 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [8] -> \dds_core.sin [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1097 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [9] -> \dds_core.sin [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1098 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [10] -> \dds_core.sin [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1099 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [11] -> \dds_core.sin [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1100 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [12] -> \dds_core.sin [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1101 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [13] -> \dds_core.sin [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1102 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [14] -> \dds_core.sin [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1103 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [15] -> \dds_core.sin [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1104 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [0] -> \dds_core.addr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1105 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [1] -> \dds_core.addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1106 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [2] -> \dds_core.addr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1107 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [3] -> \dds_core.addr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1108 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [4] -> \dds_core.addr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1109 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [5] -> \dds_core.addr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1110 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [6] -> \dds_core.addr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1111 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [7] -> \dds_core.addr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1112 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [8] -> \dds_core.addr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1113 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [9] -> \dds_core.addr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1114 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [10] -> \dds_core.addr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1115 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [11] -> \dds_core.addr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1116 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [12] -> \dds_core.addr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1117 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [13] -> \dds_core.addr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1118 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [14] -> \dds_core.addr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1119 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [15] -> \dds_core.addr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1331 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\fsm_state[1:0] [0] -> \F2SRAM.SPI_READER.fsm_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1332 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\fsm_state[1:0] [1] -> \F2SRAM.SPI_READER.fsm_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1365 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit_last[0:0] -> \F2SRAM.SPI_READER.cnt_bit_last.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1366 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit[2:0] [0] -> \F2SRAM.SPI_READER.cnt_bit [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1367 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit[2:0] [1] -> \F2SRAM.SPI_READER.cnt_bit [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1368 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit[2:0] [2] -> \F2SRAM.SPI_READER.cnt_bit [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1369 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_cmd[1:0] [0] -> \F2SRAM.SPI_READER.cnt_cmd [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1370 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_cmd[1:0] [1] -> \F2SRAM.SPI_READER.cnt_cmd [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1371 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [0] -> \F2SRAM.SPI_READER.cnt_len [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1372 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [1] -> \F2SRAM.SPI_READER.cnt_len [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1373 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [2] -> \F2SRAM.SPI_READER.cnt_len [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1374 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [3] -> \F2SRAM.SPI_READER.cnt_len [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1375 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [4] -> \F2SRAM.SPI_READER.cnt_len [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1376 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [5] -> \F2SRAM.SPI_READER.cnt_len [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1377 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [6] -> \F2SRAM.SPI_READER.cnt_len [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1378 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [7] -> \F2SRAM.SPI_READER.cnt_len [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1379 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [8] -> \F2SRAM.SPI_READER.cnt_len [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1380 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [9] -> \F2SRAM.SPI_READER.cnt_len [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1381 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [10] -> \F2SRAM.SPI_READER.cnt_len [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1382 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [11] -> \F2SRAM.SPI_READER.cnt_len [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1383 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [12] -> \F2SRAM.SPI_READER.cnt_len [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1384 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [13] -> \F2SRAM.SPI_READER.cnt_len [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1385 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [14] -> \F2SRAM.SPI_READER.cnt_len [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1386 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [15] -> \F2SRAM.SPI_READER.cnt_len [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1387 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [16] -> \F2SRAM.SPI_READER.cnt_len [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1388 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [17] -> \F2SRAM.SPI_READER.cnt_len [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$453 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [0] -> \F2SRAM.wdata [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$454 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [1] -> \F2SRAM.wdata [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$455 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [2] -> \F2SRAM.wdata [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$456 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [3] -> \F2SRAM.wdata [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$457 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [4] -> \F2SRAM.wdata [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$458 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [5] -> \F2SRAM.wdata [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$459 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [6] -> \F2SRAM.wdata [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$460 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [7] -> \F2SRAM.wdata [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$461 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [8] -> \F2SRAM.wdata [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$462 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [9] -> \F2SRAM.wdata [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$463 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [10] -> \F2SRAM.wdata [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$464 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [11] -> \F2SRAM.wdata [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$465 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [12] -> \F2SRAM.wdata [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$466 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [13] -> \F2SRAM.wdata [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$467 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [14] -> \F2SRAM.wdata [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$468 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [15] -> \F2SRAM.wdata [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$471 to $_DFFE_PP_ for $0\count[31:0] [1] -> \count [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$503 to $_DFFE_PP_ for $0\loadlookup[0:0] -> \loadlookup.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$505 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [0] -> \F2SRAM.spi_addr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$506 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [1] -> \F2SRAM.spi_addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$507 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [2] -> \F2SRAM.spi_addr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$508 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [3] -> \F2SRAM.spi_addr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$509 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [4] -> \F2SRAM.spi_addr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$510 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [5] -> \F2SRAM.spi_addr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$511 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [6] -> \F2SRAM.spi_addr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$512 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [7] -> \F2SRAM.spi_addr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$513 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [8] -> \F2SRAM.spi_addr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$514 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [9] -> \F2SRAM.spi_addr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$515 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [10] -> \F2SRAM.spi_addr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$516 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [11] -> \F2SRAM.spi_addr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$517 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [12] -> \F2SRAM.spi_addr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$518 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [13] -> \F2SRAM.spi_addr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$519 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [14] -> \F2SRAM.spi_addr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$520 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [15] -> \F2SRAM.spi_addr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$521 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [16] -> \F2SRAM.spi_addr [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$522 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [17] -> \F2SRAM.spi_addr [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$523 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [18] -> \F2SRAM.spi_addr [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$524 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [19] -> \F2SRAM.spi_addr [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$525 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [20] -> \F2SRAM.spi_addr [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$526 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [21] -> \F2SRAM.spi_addr [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$527 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [22] -> \F2SRAM.spi_addr [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$528 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [23] -> \F2SRAM.spi_addr [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$529 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [0] -> \F2SRAM.f_byte [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$530 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [1] -> \F2SRAM.f_byte [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$531 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [2] -> \F2SRAM.f_byte [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$532 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [3] -> \F2SRAM.f_byte [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$533 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [4] -> \F2SRAM.f_byte [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$534 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [5] -> \F2SRAM.f_byte [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$535 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [6] -> \F2SRAM.f_byte [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$536 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [7] -> \F2SRAM.f_byte [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$537 to $_DFFE_PP_ for $techmap\F2SRAM.$0\second[0:0] -> \F2SRAM.second.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$540 to $_DFFE_PP_ for $techmap\F2SRAM.$0\poscount[15:0] [1] -> \F2SRAM.poscount [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$556 to $_DFFE_PP_ for $techmap\F2SRAM.$0\addr[15:0] [1] -> \F2SRAM.addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$886 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [0] -> \pll1.last_eP [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$887 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [1] -> \pll1.last_eP [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$888 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [2] -> \pll1.last_eP [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$889 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [3] -> \pll1.last_eP [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$890 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [4] -> \pll1.last_eP [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$891 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [5] -> \pll1.last_eP [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$892 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [6] -> \pll1.last_eP [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$893 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [7] -> \pll1.last_eP [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$894 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [8] -> \pll1.last_eP [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$895 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [9] -> \pll1.last_eP [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$896 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [10] -> \pll1.last_eP [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$897 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [11] -> \pll1.last_eP [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$898 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [12] -> \pll1.last_eP [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$899 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [13] -> \pll1.last_eP [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$900 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [14] -> \pll1.last_eP [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$901 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [15] -> \pll1.last_eP [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$904 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [0] -> \pll1.incr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$905 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [1] -> \pll1.incr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$906 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [2] -> \pll1.incr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$907 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [3] -> \pll1.incr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$908 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [4] -> \pll1.incr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$909 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [5] -> \pll1.incr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$910 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [6] -> \pll1.incr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$911 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [7] -> \pll1.incr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$912 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [8] -> \pll1.incr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$913 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [9] -> \pll1.incr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$914 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [10] -> \pll1.incr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$915 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [11] -> \pll1.incr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$916 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [12] -> \pll1.incr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$917 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [13] -> \pll1.incr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$918 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [14] -> \pll1.incr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$919 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [15] -> \pll1.incr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$920 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [16] -> \pll1.incr [16].

9.34. Executing TECHMAP pass (map to technology primitives).

9.34.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

9.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~306 debug messages>

9.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~445 debug messages>

9.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

9.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$922 (SB_DFF): \pll1.phase [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1070 (SB_DFF): \dds_core.islast = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$953 (SB_DFF): \pll1.phase [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1071 (SB_DFF): \dds_core.lastgo = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1293 (SB_DFF): \DAC1.acc [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1294 (SB_DFF): \DAC1.acc [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1295 (SB_DFF): \DAC1.acc [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1296 (SB_DFF): \DAC1.acc [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1297 (SB_DFF): \DAC1.acc [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1298 (SB_DFF): \DAC1.acc [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1299 (SB_DFF): \DAC1.acc [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1300 (SB_DFF): \DAC1.acc [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1301 (SB_DFF): \DAC1.acc [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1302 (SB_DFF): \DAC1.acc [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1303 (SB_DFF): \DAC1.acc [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1304 (SB_DFF): \DAC1.acc [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1305 (SB_DFF): \DAC1.acc [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1306 (SB_DFF): \DAC1.acc [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1307 (SB_DFF): \DAC1.acc [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1308 (SB_DFF): \DAC1.acc [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1309 (SB_DFF): \DAC2.acc [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1310 (SB_DFF): \DAC2.acc [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1311 (SB_DFF): \DAC2.acc [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1312 (SB_DFF): \DAC2.acc [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1313 (SB_DFF): \DAC2.acc [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1314 (SB_DFF): \DAC2.acc [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1292 (SB_DFF): \DAC1.acc [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1315 (SB_DFF): \DAC2.acc [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1317 (SB_DFF): \DAC2.acc [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1318 (SB_DFF): \DAC2.acc [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1319 (SB_DFF): \DAC2.acc [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1320 (SB_DFF): \DAC2.acc [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1321 (SB_DFF): \DAC2.acc [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1322 (SB_DFF): \DAC2.acc [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1323 (SB_DFF): \DAC2.acc [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1324 (SB_DFF): \DAC2.acc [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1325 (SB_DFF): \DAC2.acc [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$909 (SB_DFFE): \pll1.incr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1316 (SB_DFF): \DAC2.acc [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$460 (SB_DFFE): \F2SRAM.wdata [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$453 (SB_DFFE): \F2SRAM.wdata [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$454 (SB_DFFE): \F2SRAM.wdata [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$455 (SB_DFFE): \F2SRAM.wdata [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$551 (SB_DFF): \F2SRAM.poscount [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$457 (SB_DFFE): \F2SRAM.wdata [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$523 (SB_DFFE): \F2SRAM.spi_addr [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$563 (SB_DFF): \F2SRAM.addr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$463 (SB_DFFE): \F2SRAM.wdata [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$464 (SB_DFFE): \F2SRAM.wdata [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$465 (SB_DFFE): \F2SRAM.wdata [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$568 (SB_DFF): \F2SRAM.addr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$467 (SB_DFFE): \F2SRAM.wdata [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$569 (SB_DFF): \F2SRAM.addr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$471 (SB_DFFE): \count [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$564 (SB_DFF): \F2SRAM.addr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$567 (SB_DFF): \F2SRAM.addr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$473 (SB_DFF): \count [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$474 (SB_DFF): \count [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$475 (SB_DFF): \count [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$476 (SB_DFF): \count [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$477 (SB_DFF): \count [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$570 (SB_DFF): \F2SRAM.addr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$506 (SB_DFFE): \F2SRAM.spi_addr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$552 (SB_DFF): \F2SRAM.poscount [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$502 (SB_DFF): \rst = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$503 (SB_DFFE): \loadlookup = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$504 (SB_DFF): \F2SRAM.spi_go = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$507 (SB_DFFE): \F2SRAM.spi_addr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$508 (SB_DFFE): \F2SRAM.spi_addr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$509 (SB_DFFE): \F2SRAM.spi_addr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$512 (SB_DFFE): \F2SRAM.spi_addr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$516 (SB_DFFE): \F2SRAM.spi_addr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$513 (SB_DFFE): \F2SRAM.spi_addr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$514 (SB_DFFE): \F2SRAM.spi_addr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$511 (SB_DFFE): \F2SRAM.spi_addr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$519 (SB_DFFE): \F2SRAM.spi_addr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$517 (SB_DFFE): \F2SRAM.spi_addr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$518 (SB_DFFE): \F2SRAM.spi_addr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$515 (SB_DFFE): \F2SRAM.spi_addr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$520 (SB_DFFE): \F2SRAM.spi_addr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$521 (SB_DFFE): \F2SRAM.spi_addr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$522 (SB_DFFE): \F2SRAM.spi_addr [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$525 (SB_DFFE): \F2SRAM.spi_addr [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$524 (SB_DFFE): \F2SRAM.spi_addr [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$527 (SB_DFFE): \F2SRAM.spi_addr [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$526 (SB_DFFE): \F2SRAM.spi_addr [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$459 (SB_DFFE): \F2SRAM.wdata [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$541 (SB_DFF): \F2SRAM.poscount [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$505 (SB_DFFE): \F2SRAM.spi_addr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$540 (SB_DFFE): \F2SRAM.poscount [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$537 (SB_DFFE): \F2SRAM.second = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$538 (SB_DFF): \F2SRAM.laststart = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$528 (SB_DFFE): \F2SRAM.spi_addr [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$542 (SB_DFF): \F2SRAM.poscount [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$543 (SB_DFF): \F2SRAM.poscount [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$544 (SB_DFF): \F2SRAM.poscount [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$545 (SB_DFF): \F2SRAM.poscount [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$546 (SB_DFF): \F2SRAM.poscount [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$547 (SB_DFF): \F2SRAM.poscount [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$548 (SB_DFF): \F2SRAM.poscount [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$549 (SB_DFF): \F2SRAM.poscount [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$550 (SB_DFF): \F2SRAM.poscount [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$458 (SB_DFFE): \F2SRAM.wdata [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$456 (SB_DFFE): \F2SRAM.wdata [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$553 (SB_DFF): \F2SRAM.poscount [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$554 (SB_DFF): \F2SRAM.poscount [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$556 (SB_DFFE): \F2SRAM.addr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$539 (SB_DFF): \F2SRAM.poscount [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$557 (SB_DFF): \F2SRAM.addr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$558 (SB_DFF): \F2SRAM.addr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$559 (SB_DFF): \F2SRAM.addr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$560 (SB_DFF): \F2SRAM.addr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$561 (SB_DFF): \F2SRAM.addr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$562 (SB_DFF): \F2SRAM.addr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$470 (SB_DFF): \count [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$566 (SB_DFF): \F2SRAM.addr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$565 (SB_DFF): \F2SRAM.addr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$461 (SB_DFFE): \F2SRAM.wdata [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$462 (SB_DFFE): \F2SRAM.wdata [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$472 (SB_DFF): \count [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$466 (SB_DFFE): \F2SRAM.wdata [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$468 (SB_DFFE): \F2SRAM.wdata [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$478 (SB_DFF): \count [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$555 (SB_DFF): \F2SRAM.addr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$571 (SB_DFF): \F2SRAM.busy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$910 (SB_DFFE): \pll1.incr [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$885 (SB_DFF): \dds_core.iscos = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$510 (SB_DFFE): \F2SRAM.spi_addr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$903 (SB_DFF): \pll1.l_in = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$902 (SB_DFF): \pll1.l2_in = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$905 (SB_DFFE): \pll1.incr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$906 (SB_DFFE): \pll1.incr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$907 (SB_DFFE): \pll1.incr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$908 (SB_DFFE): \pll1.incr [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$572 (SB_DFF): \F2SRAM.wen = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$911 (SB_DFFE): \pll1.incr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$912 (SB_DFFE): \pll1.incr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$913 (SB_DFFE): \pll1.incr [9] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$914 (SB_DFFE): \pll1.incr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$915 (SB_DFFE): \pll1.incr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$916 (SB_DFFE): \pll1.incr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$917 (SB_DFFE): \pll1.incr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$918 (SB_DFFE): \pll1.incr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$919 (SB_DFFE): \pll1.incr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$904 (SB_DFFE): \pll1.incr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$921 (SB_DFF): \pll1.locked = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$920 (SB_DFFE): \pll1.incr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$923 (SB_DFF): \pll1.phase [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$924 (SB_DFF): \pll1.phase [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$925 (SB_DFF): \pll1.phase [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$926 (SB_DFF): \pll1.phase [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$927 (SB_DFF): \pll1.phase [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$928 (SB_DFF): \pll1.phase [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$929 (SB_DFF): \pll1.phase [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$930 (SB_DFF): \pll1.phase [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$931 (SB_DFF): \pll1.phase [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$932 (SB_DFF): \pll1.phase [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$933 (SB_DFF): \pll1.phase [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$934 (SB_DFF): \pll1.phase [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$935 (SB_DFF): \pll1.phase [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$936 (SB_DFF): \pll1.phase [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$937 (SB_DFF): \pll1.phase [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$938 (SB_DFF): \pll1.phase [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$939 (SB_DFF): \pll1.phase [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$940 (SB_DFF): \pll1.phase [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$941 (SB_DFF): \pll1.phase [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$942 (SB_DFF): \pll1.phase [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$943 (SB_DFF): \pll1.phase [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$944 (SB_DFF): \pll1.phase [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$945 (SB_DFF): \pll1.phase [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$946 (SB_DFF): \pll1.phase [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$947 (SB_DFF): \pll1.phase [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$948 (SB_DFF): \pll1.phase [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$949 (SB_DFF): \pll1.phase [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$950 (SB_DFF): \pll1.phase [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$951 (SB_DFF): \pll1.phase [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$952 (SB_DFF): \pll1.phase [30] = 0

9.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$1530 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [17], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1388 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$987 (A=$techmap\pll1.$add$pll.v:40$112_Y [0], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$922 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1257 (A=\dds_core.iscos, B=1'0, S=\dds_core.islast) into $auto$simplemap.cc:420:simplemap_dff$1070 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1018 (A=$techmap\pll1.$add$pll.v:40$112_Y [31], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$953 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1435 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [2], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1335 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1391 (A=1'0, B=\F2SRAM.SPI_READER.fsm_state_next [1], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1332 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1434 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [1], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1334 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1436 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [3], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1336 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1437 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [4], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1337 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1438 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [5], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1338 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1439 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [6], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1339 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1440 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [7], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1340 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1441 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [8], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1341 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1442 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [9], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1342 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1443 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [10], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1343 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1444 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [11], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1344 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1445 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [12], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1345 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1446 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [13], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1346 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1447 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [14], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1347 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1448 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [15], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1348 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1449 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [16], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1349 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1450 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [17], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1350 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1451 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [18], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1351 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1452 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [19], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1352 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1453 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [20], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1353 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1454 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [21], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1354 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1455 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [22], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1355 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1456 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [23], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1356 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1457 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [24], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1357 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1458 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [25], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1358 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1459 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [26], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1359 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1460 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [27], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1360 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1461 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [28], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1361 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1462 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [29], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1362 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1463 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [30], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1363 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1433 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [0], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1333 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1507 (A=$auto$simplemap.cc:309:simplemap_lut$1400, B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1365 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1464 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$198_Y [31], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1364 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1498 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$192_Y [1], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1367 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1497 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$192_Y [0], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1366 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1499 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$192_Y [2], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1368 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1509 (A=$auto$alumacc.cc:474:replace_alu$360.lcu.p [0], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1369 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1510 (A=$techmap$auto$alumacc.cc:474:replace_alu$360.$xor$/usr/local/bin/../share/yosys/techmap.v:263$1578_Y [1], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1370 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1514 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [1], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1372 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1515 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [2], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1373 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1516 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [3], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1374 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1517 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [4], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1375 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1518 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [5], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1376 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1519 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [6], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1377 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1520 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [7], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1378 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1521 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [8], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1379 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1522 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [9], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1380 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1523 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [10], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1381 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1524 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [11], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1382 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1525 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [12], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1383 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1526 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [13], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1384 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1527 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [14], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1385 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1528 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [15], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1386 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1529 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [16], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1387 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1513 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$71_Y [0], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1371 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1044 (A=$techmap\pll1.$sub$pll.v:34$104_Y [2], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$888 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1256 (A=$techmap\dds_core.$logic_and$dds.v:23$94_Y, B=1'0, S=\dds_core.iscos) into $auto$simplemap.cc:420:simplemap_dff$885 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1047 (A=$techmap\pll1.$sub$pll.v:34$104_Y [5], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$891 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1045 (A=$techmap\pll1.$sub$pll.v:34$104_Y [3], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$889 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1046 (A=$techmap\pll1.$sub$pll.v:34$104_Y [4], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$890 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1043 (A=$auto$simplemap.cc:309:simplemap_lut$2430, B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$887 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1048 (A=$techmap\pll1.$sub$pll.v:34$104_Y [6], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$892 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1049 (A=$techmap\pll1.$sub$pll.v:34$104_Y [7], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$893 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1050 (A=$techmap\pll1.$sub$pll.v:34$104_Y [8], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$894 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1051 (A=$techmap\pll1.$sub$pll.v:34$104_Y [9], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$895 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1390 (A=1'0, B=\F2SRAM.SPI_READER.fsm_state_next [0], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1331 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1052 (A=$techmap\pll1.$sub$pll.v:34$104_Y [10], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$896 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1053 (A=$techmap\pll1.$sub$pll.v:34$104_Y [11], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$897 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1054 (A=$techmap\pll1.$sub$pll.v:34$104_Y [12], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$898 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1055 (A=$techmap\pll1.$sub$pll.v:34$104_Y [13], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$899 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1056 (A=$techmap\pll1.$sub$pll.v:34$104_Y [14], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$900 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1042 (A=$techmap\pll1.$sub$pll.v:34$104_Y [0], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$886 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1057 (A=$techmap\pll1.$sub$pll.v:34$104_Y [15], B=1'0, S=$techmap\pll1.$reduce_or$pll.v:33$103_Y) into $auto$simplemap.cc:420:simplemap_dff$901 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$795 (A=1'0, B=$techmap\F2SRAM.$procmux$239_Y, S=\F2SRAM.busy) into $auto$simplemap.cc:420:simplemap_dff$572 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$988 (A=$techmap\pll1.$add$pll.v:40$112_Y [1], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$923 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$989 (A=$techmap\pll1.$add$pll.v:40$112_Y [2], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$924 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$990 (A=$techmap\pll1.$add$pll.v:40$112_Y [3], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$925 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$991 (A=$techmap\pll1.$add$pll.v:40$112_Y [4], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$926 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$992 (A=$techmap\pll1.$add$pll.v:40$112_Y [5], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$927 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$993 (A=$techmap\pll1.$add$pll.v:40$112_Y [6], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$928 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$994 (A=$techmap\pll1.$add$pll.v:40$112_Y [7], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$929 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$995 (A=$techmap\pll1.$add$pll.v:40$112_Y [8], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$930 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$996 (A=$techmap\pll1.$add$pll.v:40$112_Y [9], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$931 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$997 (A=$techmap\pll1.$add$pll.v:40$112_Y [10], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$932 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$998 (A=$techmap\pll1.$add$pll.v:40$112_Y [11], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$933 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$999 (A=$techmap\pll1.$add$pll.v:40$112_Y [12], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$934 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1000 (A=$techmap\pll1.$add$pll.v:40$112_Y [13], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$935 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1001 (A=$techmap\pll1.$add$pll.v:40$112_Y [14], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$936 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1002 (A=$techmap\pll1.$add$pll.v:40$112_Y [15], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$937 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1003 (A=$techmap\pll1.$add$pll.v:40$112_Y [16], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$938 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1004 (A=$techmap\pll1.$add$pll.v:40$112_Y [17], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$939 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1005 (A=$techmap\pll1.$add$pll.v:40$112_Y [18], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$940 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1006 (A=$techmap\pll1.$add$pll.v:40$112_Y [19], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$941 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1007 (A=$techmap\pll1.$add$pll.v:40$112_Y [20], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$942 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1008 (A=$techmap\pll1.$add$pll.v:40$112_Y [21], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$943 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1009 (A=$techmap\pll1.$add$pll.v:40$112_Y [22], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$944 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1010 (A=$techmap\pll1.$add$pll.v:40$112_Y [23], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$945 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1011 (A=$techmap\pll1.$add$pll.v:40$112_Y [24], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$946 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1012 (A=$techmap\pll1.$add$pll.v:40$112_Y [25], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$947 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1013 (A=$techmap\pll1.$add$pll.v:40$112_Y [26], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$948 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1014 (A=$techmap\pll1.$add$pll.v:40$112_Y [27], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$949 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1015 (A=$techmap\pll1.$add$pll.v:40$112_Y [28], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$950 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1016 (A=$techmap\pll1.$add$pll.v:40$112_Y [29], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$951 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1017 (A=$techmap\pll1.$add$pll.v:40$112_Y [30], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$114_Y) into $auto$simplemap.cc:420:simplemap_dff$952 (SB_DFF).

9.39. Executing ICE40_OPT pass (performing simple optimizations).

9.39.1. Running ICE40 specific optimizations.

9.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~96 debug messages>

9.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~720 debug messages>
Removed a total of 240 cells.

9.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

9.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 93 unused cells and 1708 unused wires.
<suppressed ~94 debug messages>

9.39.6. Rerunning OPT passes. (Removed registers in this run.)

9.39.7. Running ICE40 specific optimizations.

9.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

9.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

9.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.39.12. Rerunning OPT passes. (Removed registers in this run.)

9.39.13. Running ICE40 specific optimizations.

9.39.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.39.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.39.16. Executing OPT_RMDFF pass (remove dff with constant values).

9.39.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.39.18. Finished OPT passes. (There is nothing left to do.)

9.40. Executing TECHMAP pass (map to technology primitives).

9.40.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

9.40.2. Continuing TECHMAP pass.
No more expansions possible.

9.41. Executing ABC pass (technology mapping using ABC).

9.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 592 gates and 900 wires to a netlist network with 306 inputs and 243 outputs.

9.41.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     248.
ABC: Participating nodes from both networks       =     514.
ABC: Participating nodes from the first network   =     249. (  82.18 % of nodes)
ABC: Participating nodes from the second network  =     265. (  87.46 % of nodes)
ABC: Node pairs (any polarity)                    =     249. (  82.18 % of names can be moved)
ABC: Node pairs (same polarity)                   =     246. (  81.19 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

9.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      302
ABC RESULTS:        internal signals:      351
ABC RESULTS:           input signals:      306
ABC RESULTS:          output signals:      243
Removing temp directory.
Removed 0 unused cells and 431 unused wires.

9.42. Executing ICE40_UNLUT pass (convert SB_LUT4 to $lut).
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$342.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$342.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$342.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$342.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$342.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$342.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$342.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$342.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$345.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$348.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$351.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[17].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[17].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[18].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[19].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[20].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[21].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[22].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[23].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[24].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[25].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[26].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[27].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[28].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[29].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[30].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[31].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$372.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$372.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$372.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$372.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$372.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$1407.slice[9].adder to $lut.

9.42.1. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      462
  1-LUT               41
  2-LUT               53
  3-LUT              273
  4-LUT               95
  with \SB_CARRY     145

Eliminating LUTs.
Number of LUTs:      460
  1-LUT               39
  2-LUT               53
  3-LUT              273
  4-LUT               95
  with \SB_CARRY     145

Combining LUTs.
Number of LUTs:      449
  1-LUT               31
  2-LUT               49
  3-LUT              276
  4-LUT               93
  with \SB_CARRY     145

Eliminated 2 LUTs.
Combined 11 LUTs.
<suppressed ~1664 debug messages>

9.42.2. Executing TECHMAP pass (map to technology primitives).

9.42.2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

9.42.2.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101100000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011001101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101011100000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000100011110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110011000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011000000110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111011100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001111101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110011011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
No more expansions possible.
<suppressed ~1032 debug messages>
Removed 0 unused cells and 909 unused wires.

9.42.3. Executing HIERARCHY pass (managing design hierarchy).

9.42.3.1. Analyzing design hierarchy..
Top module:  \top

9.42.3.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

9.42.4. Printing statistics.

=== top ===

   Number of wires:                434
   Number of wire bits:           1521
   Number of public wires:         117
   Number of public wire bits:     888
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                925
     SB_CARRY                      161
     SB_DFF                         81
     SB_DFFE                       116
     SB_DFFESR                      11
     SB_DFFESS                      31
     SB_DFFSR                       62
     SB_DFFSS                        5
     SB_IO                           4
     SB_LUT4                       449
     SB_PLL40_CORE                   1
     SB_SPRAM256KA                   4

9.42.5. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

9.42.6. Executing JSON backend.

Warnings: 20 unique messages, 20 total
End of script. Logfile hash: 201311fa59
CPU: user 1.45s system 0.06s, MEM: 74.93 MB total, 42.82 MB resident
Yosys 0.8+612 (git sha1 c6d8692c, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 18% 21x opt_clean (0 sec), 14% 20x opt_expr (0 sec), ...
