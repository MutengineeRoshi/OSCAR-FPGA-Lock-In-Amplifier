
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2018  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.8+612 (git sha1 c6d8692c, clang 6.0.0-1ubuntu2 -fPIC -Os)


-- Parsing `top.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: top.v
Parsing Verilog input from `top.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

-- Parsing `sram16x16.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: sram16x16.v
Parsing Verilog input from `sram16x16.v' to AST representation.
Generating RTLIL representation for module `\sram16x16'.
Successfully finished Verilog frontend.

-- Parsing `Flash_to_SRAM.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: Flash_to_SRAM.v
Parsing Verilog input from `Flash_to_SRAM.v' to AST representation.
Generating RTLIL representation for module `\Flash_to_SRAM'.
Successfully finished Verilog frontend.

-- Parsing `spi_flash_reader.v' using frontend `verilog' --

4. Executing Verilog-2005 frontend: spi_flash_reader.v
Parsing Verilog input from `spi_flash_reader.v' to AST representation.
Generating RTLIL representation for module `\spi_flash_reader'.
Successfully finished Verilog frontend.

-- Parsing `sigma_delta.v' using frontend `verilog' --

5. Executing Verilog-2005 frontend: sigma_delta.v
Parsing Verilog input from `sigma_delta.v' to AST representation.
Generating RTLIL representation for module `\sigma_delta'.
Successfully finished Verilog frontend.

-- Parsing `dds.v' using frontend `verilog' --

6. Executing Verilog-2005 frontend: dds.v
Parsing Verilog input from `dds.v' to AST representation.
Generating RTLIL representation for module `\dds'.
Successfully finished Verilog frontend.

-- Parsing `mult16x16.v' using frontend `verilog' --

7. Executing Verilog-2005 frontend: mult16x16.v
Parsing Verilog input from `mult16x16.v' to AST representation.
Generating RTLIL representation for module `\mult16x16'.
Successfully finished Verilog frontend.

-- Parsing `pll.v' using frontend `verilog' --

8. Executing Verilog-2005 frontend: pll.v
Parsing Verilog input from `pll.v' to AST representation.
Generating RTLIL representation for module `\pll'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top top -json yosysout.json' --

9. Executing SYNTH_ICE40 pass.

9.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `$__ICE40_FULL_ADDER'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

9.2. Executing HIERARCHY pass (managing design hierarchy).

9.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \pll
Used module:     \sigma_delta
Used module:     \dds
Used module:     \Flash_to_SRAM
Used module:         \spi_flash_reader
Used module:     \sram16x16

9.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \pll
Used module:     \sigma_delta
Used module:     \dds
Used module:     \Flash_to_SRAM
Used module:         \spi_flash_reader
Used module:     \sram16x16
Removing unused module `\mult16x16'.
Removed 1 unused modules.
Mapping positional arguments of cell top.pll1 (pll).
Mapping positional arguments of cell top.DAC2 (sigma_delta).
Mapping positional arguments of cell top.DAC1 (sigma_delta).
Mapping positional arguments of cell top.dds_core (dds).
Mapping positional arguments of cell top.F2SRAM (Flash_to_SRAM).
Mapping positional arguments of cell top.SRAM (sram16x16).
Warning: Resizing cell port top.DAC2.dac_val from 15 bits to 16 bits.
Warning: Resizing cell port top.DAC1.dac_val from 15 bits to 16 bits.

9.3. Executing PROC pass (convert processes to netlists).

9.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 4 dead cases from process $proc$dds.v:21$94 in module dds.
Marked 4 switch rules as full_case in process $proc$dds.v:21$94 in module dds.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:187$74 in module spi_flash_reader.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:174$70 in module spi_flash_reader.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:166$66 in module spi_flash_reader.
Marked 2 switch rules as full_case in process $proc$spi_flash_reader.v:155$61 in module spi_flash_reader.
Marked 2 switch rules as full_case in process $proc$spi_flash_reader.v:141$59 in module spi_flash_reader.
Removed 1 dead cases from process $proc$spi_flash_reader.v:112$56 in module spi_flash_reader.
Marked 5 switch rules as full_case in process $proc$spi_flash_reader.v:112$56 in module spi_flash_reader.
Marked 1 switch rules as full_case in process $proc$spi_flash_reader.v:104$54 in module spi_flash_reader.
Removed a total of 5 dead cases.

9.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 37 assignments to connections.

9.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\pll.$proc$pll.v:24$126'.
  Set init value: \l2_in = 1'0
Found init rule in `\pll.$proc$pll.v:24$125'.
  Set init value: \l_in = 1'0
Found init rule in `\pll.$proc$pll.v:22$124'.
  Set init value: \incr = 17'00000001001011000
Found init rule in `\pll.$proc$pll.v:19$123'.
  Set init value: \phase = 0
Found init rule in `\pll.$proc$pll.v:12$122'.
  Set init value: \locked = 1'0
Found init rule in `\dds.$proc$dds.v:19$107'.
  Set init value: \islast = 1'0
Found init rule in `\dds.$proc$dds.v:19$106'.
  Set init value: \lastgo = 1'0
Found init rule in `\dds.$proc$dds.v:19$105'.
  Set init value: \iscos = 1'0
Found init rule in `\dds.$proc$dds.v:15$104'.
  Set init value: \addr = 16'0000000000000000
Found init rule in `\dds.$proc$dds.v:12$103'.
  Set init value: \cos = 16'0000000000000000
Found init rule in `\dds.$proc$dds.v:11$102'.
  Set init value: \sin = 16'0000000000000000
Found init rule in `\sigma_delta.$proc$sigma_delta.v:13$93'.
  Set init value: \acc = 17'00000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$53'.
  Set init value: \busystop = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$52'.
  Set init value: \spi_go = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:35$50'.
  Set init value: \spi_addr = 24'000000000000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$49'.
  Set init value: \second = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$48'.
  Set init value: \laststart = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:30$47'.
  Set init value: \poscount = 17'00000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:24$46'.
  Set init value: \wdata = 16'0000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:20$45'.
  Set init value: \addr = 16'0000000000000000
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:19$44'.
  Set init value: \wen = 1'0
Found init rule in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:10$43'.
  Set init value: \busy = 1'0
Found init rule in `\top.$proc$top.v:26$16'.
  Set init value: \loadlookup = 1'0
Found init rule in `\top.$proc$top.v:26$15'.
  Set init value: \rst = 1'0
Found init rule in `\top.$proc$top.v:25$14'.
  Set init value: \sweep = 18'000000000000000000
Found init rule in `\top.$proc$top.v:24$13'.
  Set init value: \count = 0

9.3.5. Executing PROC_ARST pass (detect async resets in processes).

9.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pll.$proc$pll.v:24$126'.
Creating decoders for process `\pll.$proc$pll.v:24$125'.
Creating decoders for process `\pll.$proc$pll.v:22$124'.
Creating decoders for process `\pll.$proc$pll.v:19$123'.
Creating decoders for process `\pll.$proc$pll.v:12$122'.
Creating decoders for process `\pll.$proc$pll.v:37$112'.
     1/4: $0\phase[31:0]
     2/4: $0\locked[0:0]
     3/4: $0\last_eP[15:0]
     4/4: $0\incr[16:0]
Creating decoders for process `\dds.$proc$dds.v:19$107'.
Creating decoders for process `\dds.$proc$dds.v:19$106'.
Creating decoders for process `\dds.$proc$dds.v:19$105'.
Creating decoders for process `\dds.$proc$dds.v:15$104'.
Creating decoders for process `\dds.$proc$dds.v:12$103'.
Creating decoders for process `\dds.$proc$dds.v:11$102'.
Creating decoders for process `\dds.$proc$dds.v:21$94'.
     1/5: $0\islast[0:0]
     2/5: $0\iscos[0:0]
     3/5: $0\cos[15:0]
     4/5: $0\sin[15:0]
     5/5: $0\addr[15:0]
Creating decoders for process `\sigma_delta.$proc$sigma_delta.v:13$93'.
Creating decoders for process `\sigma_delta.$proc$sigma_delta.v:17$91'.
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:201$80'.
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:187$74'.
     1/1: $0\rdy_i[0:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:174$70'.
     1/1: $0\cnt_len[17:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:166$66'.
     1/1: $0\cnt_cmd[1:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:155$61'.
     1/2: $0\cnt_bit_last[0:0]
     2/2: $0\cnt_bit[2:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:141$59'.
     1/1: $0\shift_reg[31:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:112$56'.
     1/5: $5\fsm_state_next[1:0]
     2/5: $4\fsm_state_next[1:0]
     3/5: $3\fsm_state_next[1:0]
     4/5: $2\fsm_state_next[1:0]
     5/5: $1\fsm_state_next[1:0]
Creating decoders for process `\spi_flash_reader.$proc$spi_flash_reader.v:104$54'.
     1/1: $0\fsm_state[1:0]
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$53'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$52'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:36$51'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:35$50'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$49'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$48'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:30$47'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:24$46'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:20$45'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:19$44'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:10$43'.
Creating decoders for process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
     1/10: $0\wen[0:0]
     2/10: $0\spi_go[0:0]
     3/10: $0\busystop[0:0]
     4/10: $0\spi_addr[23:0]
     5/10: $0\f_byte[7:0]
     6/10: $0\second[0:0]
     7/10: $0\poscount[16:0]
     8/10: $0\wdata[15:0]
     9/10: $0\addr[15:0]
    10/10: $0\busy[0:0]
Creating decoders for process `\top.$proc$top.v:26$16'.
Creating decoders for process `\top.$proc$top.v:26$15'.
Creating decoders for process `\top.$proc$top.v:25$14'.
Creating decoders for process `\top.$proc$top.v:24$13'.
Creating decoders for process `\top.$proc$top.v:56$6'.
     1/1: $0\loadlookup[0:0]

9.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\spi_flash_reader.\fsm_state_next' from process `\spi_flash_reader.$proc$spi_flash_reader.v:112$56'.
No latch inferred for signal `\Flash_to_SRAM.\spi_len' from process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:36$51'.

9.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pll.\phase' using process `\pll.$proc$pll.v:37$112'.
  created $dff cell `$procdff$298' with positive edge clock.
Creating register for signal `\pll.\locked' using process `\pll.$proc$pll.v:37$112'.
  created $dff cell `$procdff$299' with positive edge clock.
Creating register for signal `\pll.\incr' using process `\pll.$proc$pll.v:37$112'.
  created $dff cell `$procdff$300' with positive edge clock.
Creating register for signal `\pll.\l_in' using process `\pll.$proc$pll.v:37$112'.
  created $dff cell `$procdff$301' with positive edge clock.
Creating register for signal `\pll.\l2_in' using process `\pll.$proc$pll.v:37$112'.
  created $dff cell `$procdff$302' with positive edge clock.
Creating register for signal `\pll.\last_eP' using process `\pll.$proc$pll.v:37$112'.
  created $dff cell `$procdff$303' with positive edge clock.
Creating register for signal `\dds.\addr' using process `\dds.$proc$dds.v:21$94'.
  created $dff cell `$procdff$304' with positive edge clock.
Creating register for signal `\dds.\sin' using process `\dds.$proc$dds.v:21$94'.
  created $dff cell `$procdff$305' with positive edge clock.
Creating register for signal `\dds.\cos' using process `\dds.$proc$dds.v:21$94'.
  created $dff cell `$procdff$306' with positive edge clock.
Creating register for signal `\dds.\iscos' using process `\dds.$proc$dds.v:21$94'.
  created $dff cell `$procdff$307' with positive edge clock.
Creating register for signal `\dds.\lastgo' using process `\dds.$proc$dds.v:21$94'.
  created $dff cell `$procdff$308' with positive edge clock.
Creating register for signal `\dds.\islast' using process `\dds.$proc$dds.v:21$94'.
  created $dff cell `$procdff$309' with positive edge clock.
Creating register for signal `\sigma_delta.\acc' using process `\sigma_delta.$proc$sigma_delta.v:17$91'.
  created $dff cell `$procdff$310' with positive edge clock.
Creating register for signal `\spi_flash_reader.\valid_i' using process `\spi_flash_reader.$proc$spi_flash_reader.v:201$80'.
  created $dff cell `$procdff$311' with positive edge clock.
Creating register for signal `\spi_flash_reader.\rdy_i' using process `\spi_flash_reader.$proc$spi_flash_reader.v:187$74'.
  created $dff cell `$procdff$312' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_len' using process `\spi_flash_reader.$proc$spi_flash_reader.v:174$70'.
  created $dff cell `$procdff$313' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_cmd' using process `\spi_flash_reader.$proc$spi_flash_reader.v:166$66'.
  created $dff cell `$procdff$314' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_bit' using process `\spi_flash_reader.$proc$spi_flash_reader.v:155$61'.
  created $dff cell `$procdff$315' with positive edge clock.
Creating register for signal `\spi_flash_reader.\cnt_bit_last' using process `\spi_flash_reader.$proc$spi_flash_reader.v:155$61'.
  created $dff cell `$procdff$316' with positive edge clock.
Creating register for signal `\spi_flash_reader.\shift_reg' using process `\spi_flash_reader.$proc$spi_flash_reader.v:141$59'.
  created $dff cell `$procdff$317' with positive edge clock.
Creating register for signal `\spi_flash_reader.\fsm_state' using process `\spi_flash_reader.$proc$spi_flash_reader.v:104$54'.
  created $dff cell `$procdff$318' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\wen' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
  created $dff cell `$procdff$319' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\busy' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
  created $dff cell `$procdff$320' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\addr' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
  created $dff cell `$procdff$321' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\wdata' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
  created $dff cell `$procdff$322' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\poscount' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
  created $dff cell `$procdff$323' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\laststart' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
  created $dff cell `$procdff$324' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\second' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
  created $dff cell `$procdff$325' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\f_byte' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
  created $dff cell `$procdff$326' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\spi_addr' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
  created $dff cell `$procdff$327' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\spi_go' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
  created $dff cell `$procdff$328' with positive edge clock.
Creating register for signal `\Flash_to_SRAM.\busystop' using process `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
  created $dff cell `$procdff$329' with positive edge clock.
Creating register for signal `\top.\count' using process `\top.$proc$top.v:56$6'.
  created $dff cell `$procdff$330' with positive edge clock.
Creating register for signal `\top.\sweep' using process `\top.$proc$top.v:56$6'.
  created $dff cell `$procdff$331' with positive edge clock.
Creating register for signal `\top.\rst' using process `\top.$proc$top.v:56$6'.
  created $dff cell `$procdff$332' with positive edge clock.
Creating register for signal `\top.\loadlookup' using process `\top.$proc$top.v:56$6'.
  created $dff cell `$procdff$333' with positive edge clock.

9.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `pll.$proc$pll.v:24$126'.
Removing empty process `pll.$proc$pll.v:24$125'.
Removing empty process `pll.$proc$pll.v:22$124'.
Removing empty process `pll.$proc$pll.v:19$123'.
Removing empty process `pll.$proc$pll.v:12$122'.
Found and cleaned up 2 empty switches in `\pll.$proc$pll.v:37$112'.
Removing empty process `pll.$proc$pll.v:37$112'.
Removing empty process `dds.$proc$dds.v:19$107'.
Removing empty process `dds.$proc$dds.v:19$106'.
Removing empty process `dds.$proc$dds.v:19$105'.
Removing empty process `dds.$proc$dds.v:15$104'.
Removing empty process `dds.$proc$dds.v:12$103'.
Removing empty process `dds.$proc$dds.v:11$102'.
Found and cleaned up 7 empty switches in `\dds.$proc$dds.v:21$94'.
Removing empty process `dds.$proc$dds.v:21$94'.
Removing empty process `sigma_delta.$proc$sigma_delta.v:13$93'.
Removing empty process `sigma_delta.$proc$sigma_delta.v:17$91'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:201$80'.
Found and cleaned up 1 empty switch in `\spi_flash_reader.$proc$spi_flash_reader.v:187$74'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:187$74'.
Found and cleaned up 2 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:174$70'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:174$70'.
Found and cleaned up 2 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:166$66'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:166$66'.
Found and cleaned up 3 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:155$61'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:155$61'.
Found and cleaned up 2 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:141$59'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:141$59'.
Found and cleaned up 5 empty switches in `\spi_flash_reader.$proc$spi_flash_reader.v:112$56'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:112$56'.
Found and cleaned up 1 empty switch in `\spi_flash_reader.$proc$spi_flash_reader.v:104$54'.
Removing empty process `spi_flash_reader.$proc$spi_flash_reader.v:104$54'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$53'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:37$52'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:36$51'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:35$50'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$49'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:31$48'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:30$47'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:24$46'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:20$45'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:19$44'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:10$43'.
Found and cleaned up 5 empty switches in `\Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
Removing empty process `Flash_to_SRAM.$proc$Flash_to_SRAM.v:43$35'.
Removing empty process `top.$proc$top.v:26$16'.
Removing empty process `top.$proc$top.v:26$15'.
Removing empty process `top.$proc$top.v:25$14'.
Removing empty process `top.$proc$top.v:24$13'.
Found and cleaned up 1 empty switch in `\top.$proc$top.v:56$6'.
Removing empty process `top.$proc$top.v:56$6'.
Cleaned up 31 empty switches.

9.4. Executing FLATTEN pass (flatten design).
Using template Flash_to_SRAM for cells of type Flash_to_SRAM.
Using template sram16x16 for cells of type sram16x16.
Using template dds for cells of type dds.
Using template sigma_delta for cells of type sigma_delta.
Using template pll for cells of type pll.
Using template spi_flash_reader for cells of type spi_flash_reader.
<suppressed ~7 debug messages>
No more expansions possible.
Deleting now unused module pll.
Deleting now unused module dds.
Deleting now unused module sigma_delta.
Deleting now unused module spi_flash_reader.
Deleting now unused module Flash_to_SRAM.
Deleting now unused module sram16x16.

9.5. Executing TRIBUF pass.

9.6. Executing DEMINOUT pass (demote inout ports to input or output).

9.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~18 debug messages>

9.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 12 unused cells and 163 unused wires.
<suppressed ~18 debug messages>

9.9. Executing CHECK pass (checking for obvious problems).
checking module top..
Warning: Wire top.\HB [2] is used but has no driver.
Warning: Wire top.\HB [1] is used but has no driver.
found and reported 2 problems.

9.10. Executing OPT pass (performing simple optimizations).

9.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~72 debug messages>
Removed a total of 24 cells.

9.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port A of cell $techmap\dds_core.$procmux$143: \dds_core.islast -> 1'0
      Replacing known input bits on port A of cell $techmap\dds_core.$procmux$147: \dds_core.iscos -> 1'0
  Analyzing evaluation results.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$211.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$217.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$224.
    dead port 2/2 on $mux $techmap\F2SRAM.SPI_READER.$procmux$232.
Removed 4 multiplexer ports.
<suppressed ~34 debug messages>

9.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
    New input vector for $reduce_or cell $techmap\pll1.$reduce_or$pll.v:33$108: { \pll1.phase [25] \pll1.phase [26] \pll1.phase [27] \pll1.phase [28] \pll1.phase [29] \pll1.phase [30] \pll1.phase [31] }
    New input vector for $reduce_and cell $techmap\pll1.$reduce_and$pll.v:39$115: { \pll1.eP [12] \pll1.eP [13] \pll1.eP [14] \pll1.eP [15] }
    New input vector for $reduce_and cell $techmap\pll1.$reduce_and$pll.v:39$114: { $techmap\pll1.$not$pll.v:39$113_Y [0] $techmap\pll1.$not$pll.v:39$113_Y [1] $techmap\pll1.$not$pll.v:39$113_Y [2] $techmap\pll1.$not$pll.v:39$113_Y [3] }
    New ctrl vector for $pmux cell $techmap\dds_core.$procmux$151: { $auto$opt_reduce.cc:132:opt_mux$337 $auto$opt_reduce.cc:132:opt_mux$335 }
  Optimizing cells in module \top.
Performed a total of 4 changes.

9.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.10.6. Executing OPT_RMDFF pass (remove dff with constant values).
Promoting init spec \sweep = 18'000000000000000000 to constant driver in module top.
Promoted 1 init specs to constant drivers.

9.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 29 unused wires.
<suppressed ~3 debug messages>

9.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.10.9. Rerunning OPT passes. (Maybe there is more to do..)

9.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

9.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

9.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

9.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.10.16. Finished OPT passes. (There is nothing left to do.)

9.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port A of cell top.$not$top.v:43$3 ($not).
Removed top 31 bits (of 32) from port B of cell top.$add$top.v:59$9 ($add).
Removed top 31 bits (of 32) from port B of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:71$42 ($add).
Removed top 15 bits (of 32) from port Y of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:71$42 ($add).
Removed top 31 bits (of 32) from port B of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:69$41 ($add).
Removed top 16 bits (of 32) from port Y of cell top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:69$41 ($add).
Removed top 1 bits (of 2) from port B of cell top.$techmap\dds_core.$procmux$154_CMP0 ($eq).
Removed top 1 bits (of 16) from port B of cell top.$techmap\DAC1.$add$sigma_delta.v:18$92 ($add).
Removed top 1 bits (of 16) from port B of cell top.$techmap\DAC2.$add$sigma_delta.v:18$92 ($add).
Removed top 12 bits (of 17) from port B of cell top.$techmap\pll1.$add$pll.v:48$121 ($add).
Removed top 10 bits (of 17) from port B of cell top.$techmap\pll1.$sub$pll.v:48$120 ($sub).
Removed top 1 bits (of 16) from port B of cell top.$techmap\pll1.$sub$pll.v:34$109 ($sub).
Removed top 1 bits (of 2) from port B of cell top.$techmap\F2SRAM.SPI_READER.$eq$spi_flash_reader.v:169$67 ($eq).
Removed top 31 bits (of 32) from port B of cell top.$techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$64 ($add).
Removed top 29 bits (of 32) from port Y of cell top.$techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$64 ($add).
Removed top 16 bits (of 32) from wire top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:69$41_Y.
Removed top 15 bits (of 32) from wire top.$techmap\F2SRAM.$add$Flash_to_SRAM.v:71$42_Y.
Removed top 29 bits (of 32) from wire top.$techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$64_Y.

9.12. Executing PEEPOPT pass (run peephole optimizers).

9.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

9.14. Executing SHARE pass (SAT-based resource sharing).

9.15. Executing TECHMAP pass (map to technology primitives).

9.15.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

9.15.2. Continuing TECHMAP pass.
Using template $paramod$6816abac91a51b405c3de5bceb2855c03dd44485\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$99e5b0ecd4c7f9fb6cd3a733593eba894c42613f\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$0760830c1e6c196382cd2cb153e9fff2d84c061d\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~100 debug messages>

9.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

9.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$top.v:59$9 ($add).
  creating $macc model for $techmap\DAC1.$add$sigma_delta.v:18$92 ($add).
  creating $macc model for $techmap\DAC2.$add$sigma_delta.v:18$92 ($add).
  creating $macc model for $techmap\F2SRAM.$add$Flash_to_SRAM.v:69$41 ($add).
  creating $macc model for $techmap\F2SRAM.$add$Flash_to_SRAM.v:71$42 ($add).
  creating $macc model for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$64 ($add).
  creating $macc model for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:170$68 ($add).
  creating $macc model for $techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73 ($sub).
  creating $macc model for $techmap\pll1.$add$pll.v:40$117 ($add).
  creating $macc model for $techmap\pll1.$add$pll.v:48$121 ($add).
  creating $macc model for $techmap\pll1.$sub$pll.v:34$109 ($sub).
  creating $macc model for $techmap\pll1.$sub$pll.v:35$111 ($sub).
  creating $macc model for $techmap\pll1.$sub$pll.v:48$120 ($sub).
  merging $macc model for $techmap\pll1.$sub$pll.v:48$120 into $techmap\pll1.$add$pll.v:48$121.
  creating $alu model for $macc $techmap\pll1.$sub$pll.v:35$111.
  creating $alu model for $macc $techmap\pll1.$sub$pll.v:34$109.
  creating $alu model for $macc $techmap\pll1.$add$pll.v:40$117.
  creating $alu model for $macc $techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73.
  creating $alu model for $macc $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:170$68.
  creating $alu model for $macc $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$64.
  creating $alu model for $macc $techmap\F2SRAM.$add$Flash_to_SRAM.v:71$42.
  creating $alu model for $macc $techmap\F2SRAM.$add$Flash_to_SRAM.v:69$41.
  creating $alu model for $macc $techmap\DAC2.$add$sigma_delta.v:18$92.
  creating $alu model for $macc $techmap\DAC1.$add$sigma_delta.v:18$92.
  creating $alu model for $macc $add$top.v:59$9.
  creating $macc cell for $techmap\pll1.$add$pll.v:48$121: $auto$alumacc.cc:354:replace_macc$353
  creating $alu cell for $add$top.v:59$9: $auto$alumacc.cc:474:replace_alu$354
  creating $alu cell for $techmap\DAC1.$add$sigma_delta.v:18$92: $auto$alumacc.cc:474:replace_alu$357
  creating $alu cell for $techmap\DAC2.$add$sigma_delta.v:18$92: $auto$alumacc.cc:474:replace_alu$360
  creating $alu cell for $techmap\F2SRAM.$add$Flash_to_SRAM.v:69$41: $auto$alumacc.cc:474:replace_alu$363
  creating $alu cell for $techmap\F2SRAM.$add$Flash_to_SRAM.v:71$42: $auto$alumacc.cc:474:replace_alu$366
  creating $alu cell for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:162$64: $auto$alumacc.cc:474:replace_alu$369
  creating $alu cell for $techmap\F2SRAM.SPI_READER.$add$spi_flash_reader.v:170$68: $auto$alumacc.cc:474:replace_alu$372
  creating $alu cell for $techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73: $auto$alumacc.cc:474:replace_alu$375
  creating $alu cell for $techmap\pll1.$add$pll.v:40$117: $auto$alumacc.cc:474:replace_alu$378
  creating $alu cell for $techmap\pll1.$sub$pll.v:34$109: $auto$alumacc.cc:474:replace_alu$381
  creating $alu cell for $techmap\pll1.$sub$pll.v:35$111: $auto$alumacc.cc:474:replace_alu$384
  created 11 $alu and 1 $macc cells.

9.19. Executing OPT pass (performing simple optimizations).

9.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

9.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

9.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

9.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.19.9. Rerunning OPT passes. (Maybe there is more to do..)

9.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

9.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

9.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

9.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.19.16. Finished OPT passes. (There is nothing left to do.)

9.20. Executing FSM pass (extract and optimize FSM).

9.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking top.F2SRAM.SPI_READER.fsm_state as FSM state register:
    Users of register don't seem to benefit from recoding.
Not marking top.F2SRAM.spi_addr as FSM state register:
    Users of register don't seem to benefit from recoding.
    Register has an initialization value.

9.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

9.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

9.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

9.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

9.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

9.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

9.21. Executing OPT pass (performing simple optimizations).

9.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

9.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.21.5. Finished fast OPT passes.

9.22. Executing MEMORY pass.

9.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

9.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

9.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

9.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

9.25. Executing TECHMAP pass (map to technology primitives).

9.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

9.25.2. Continuing TECHMAP pass.
No more expansions possible.

9.26. Executing ICE40_BRAMINIT pass.

9.27. Executing OPT pass (performing simple optimizations).

9.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~18 debug messages>

9.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

9.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 5 unused cells and 12 unused wires.
<suppressed ~6 debug messages>

9.27.5. Finished fast OPT passes.

9.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

9.29. Executing OPT pass (performing simple optimizations).

9.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~32 debug messages>

9.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

9.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.29.9. Finished OPT passes. (There is nothing left to do.)

9.30. Executing TECHMAP pass (map to technology primitives).

9.30.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

9.30.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

9.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=15\B_WIDTH=16\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=3 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper maccmap for cells of type $macc.
  add \pll1.incr (17 bits, signed)
  add \pll1.eD [15:11] (5 bits, signed)
  sub \pll1.eP [15:9] (7 bits, signed)
  packed 1 (1) bits / 1 words into adder tree
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=16\B_WIDTH=15\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=16\B_WIDTH=16\Y_WIDTH=16 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=17\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=18\B_WIDTH=1\Y_WIDTH=18 for cells of type $alu.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=2\Y_WIDTH=2 for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_fa\WIDTH=17 for cells of type $fa.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=17\B_WIDTH=17\Y_WIDTH=17 for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=2 for cells of type $lcu.
No more expansions possible.
<suppressed ~514 debug messages>

9.31. Executing ICE40_OPT pass (performing simple optimizations).

9.31.1. Running ICE40 specific optimizations.

9.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~374 debug messages>

9.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

9.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

9.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 309 unused cells and 254 unused wires.
<suppressed ~310 debug messages>

9.31.6. Rerunning OPT passes. (Removed registers in this run.)

9.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$354.slice[0].carry: CO=\count [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$363.slice[0].carry: CO=\F2SRAM.addr [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$366.slice[0].carry: CO=\F2SRAM.poscount [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$369.slice[0].carry: CO=\F2SRAM.SPI_READER.cnt_bit [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$381.slice[0].carry: CO=\pll1.phase [9]
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[1].adder back to logic.

9.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~91 debug messages>

9.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

9.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

9.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 11 unused wires.
<suppressed ~1 debug messages>

9.31.12. Rerunning OPT passes. (Removed registers in this run.)

9.31.13. Running ICE40 specific optimizations.

9.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

9.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.31.18. Finished OPT passes. (There is nothing left to do.)

9.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

9.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1000 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [15] -> \dds_core.sin [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1001 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [0] -> \dds_core.addr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1002 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [1] -> \dds_core.addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1003 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [2] -> \dds_core.addr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1004 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [3] -> \dds_core.addr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1005 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [4] -> \dds_core.addr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1006 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [5] -> \dds_core.addr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1007 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [6] -> \dds_core.addr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1008 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [7] -> \dds_core.addr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1009 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [8] -> \dds_core.addr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1010 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [9] -> \dds_core.addr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1011 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [10] -> \dds_core.addr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1012 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [11] -> \dds_core.addr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1013 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [12] -> \dds_core.addr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1014 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [13] -> \dds_core.addr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1015 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [14] -> \dds_core.addr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1016 to $_DFFE_PP_ for $techmap\dds_core.$0\addr[15:0] [15] -> \dds_core.addr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1211 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [0] -> \pll1.last_eP [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1212 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [1] -> \pll1.last_eP [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1213 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [2] -> \pll1.last_eP [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1214 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [3] -> \pll1.last_eP [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1215 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [4] -> \pll1.last_eP [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1216 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [5] -> \pll1.last_eP [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1217 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [6] -> \pll1.last_eP [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1218 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [7] -> \pll1.last_eP [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1219 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [8] -> \pll1.last_eP [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1220 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [9] -> \pll1.last_eP [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1221 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [10] -> \pll1.last_eP [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1222 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [11] -> \pll1.last_eP [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1223 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [12] -> \pll1.last_eP [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1224 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [13] -> \pll1.last_eP [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1225 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [14] -> \pll1.last_eP [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1226 to $_DFFE_PP_ for $techmap\pll1.$0\last_eP[15:0] [15] -> \pll1.last_eP [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1228 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [0] -> \pll1.incr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1229 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [1] -> \pll1.incr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1230 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [2] -> \pll1.incr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1231 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [3] -> \pll1.incr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1232 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [4] -> \pll1.incr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1233 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [5] -> \pll1.incr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1234 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [6] -> \pll1.incr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1235 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [7] -> \pll1.incr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1236 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [8] -> \pll1.incr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1237 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [9] -> \pll1.incr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1238 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [10] -> \pll1.incr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1239 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [11] -> \pll1.incr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1240 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [12] -> \pll1.incr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1241 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [13] -> \pll1.incr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1242 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [14] -> \pll1.incr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1243 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [15] -> \pll1.incr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1244 to $_DFFE_PP_ for $techmap\pll1.$0\incr[16:0] [16] -> \pll1.incr [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1394 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\fsm_state[1:0] [0] -> \F2SRAM.SPI_READER.fsm_state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1395 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\fsm_state[1:0] [1] -> \F2SRAM.SPI_READER.fsm_state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1428 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit_last[0:0] -> \F2SRAM.SPI_READER.cnt_bit_last.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1429 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit[2:0] [0] -> \F2SRAM.SPI_READER.cnt_bit [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1430 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit[2:0] [1] -> \F2SRAM.SPI_READER.cnt_bit [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1431 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_bit[2:0] [2] -> \F2SRAM.SPI_READER.cnt_bit [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1432 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_cmd[1:0] [0] -> \F2SRAM.SPI_READER.cnt_cmd [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1433 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_cmd[1:0] [1] -> \F2SRAM.SPI_READER.cnt_cmd [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1434 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [0] -> \F2SRAM.SPI_READER.cnt_len [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1435 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [1] -> \F2SRAM.SPI_READER.cnt_len [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1436 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [2] -> \F2SRAM.SPI_READER.cnt_len [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1437 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [3] -> \F2SRAM.SPI_READER.cnt_len [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1438 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [4] -> \F2SRAM.SPI_READER.cnt_len [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1439 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [5] -> \F2SRAM.SPI_READER.cnt_len [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1440 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [6] -> \F2SRAM.SPI_READER.cnt_len [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1441 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [7] -> \F2SRAM.SPI_READER.cnt_len [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1442 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [8] -> \F2SRAM.SPI_READER.cnt_len [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1443 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [9] -> \F2SRAM.SPI_READER.cnt_len [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1444 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [10] -> \F2SRAM.SPI_READER.cnt_len [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1445 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [11] -> \F2SRAM.SPI_READER.cnt_len [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1446 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [12] -> \F2SRAM.SPI_READER.cnt_len [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1447 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [13] -> \F2SRAM.SPI_READER.cnt_len [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1448 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [14] -> \F2SRAM.SPI_READER.cnt_len [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1449 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [15] -> \F2SRAM.SPI_READER.cnt_len [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1450 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [16] -> \F2SRAM.SPI_READER.cnt_len [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1451 to $_DFFE_PP_ for $techmap\F2SRAM.SPI_READER.$0\cnt_len[17:0] [17] -> \F2SRAM.SPI_READER.cnt_len [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$472 to $_DFFE_PP_ for $0\count[31:0] [1] -> \count [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$504 to $_DFFE_PP_ for $0\loadlookup[0:0] -> \loadlookup.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$506 to $_DFFE_PP_ for $techmap\F2SRAM.$0\poscount[16:0] [1] -> \F2SRAM.poscount [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$522 to $_DFFE_PP_ for $techmap\F2SRAM.$0\busystop[0:0] -> \F2SRAM.busystop.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$524 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [0] -> \F2SRAM.spi_addr [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$525 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [1] -> \F2SRAM.spi_addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$526 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [2] -> \F2SRAM.spi_addr [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$527 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [3] -> \F2SRAM.spi_addr [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$528 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [4] -> \F2SRAM.spi_addr [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$529 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [5] -> \F2SRAM.spi_addr [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$530 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [6] -> \F2SRAM.spi_addr [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$531 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [7] -> \F2SRAM.spi_addr [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$532 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [8] -> \F2SRAM.spi_addr [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$533 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [9] -> \F2SRAM.spi_addr [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$534 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [10] -> \F2SRAM.spi_addr [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$535 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [11] -> \F2SRAM.spi_addr [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$536 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [12] -> \F2SRAM.spi_addr [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$537 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [13] -> \F2SRAM.spi_addr [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$538 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [14] -> \F2SRAM.spi_addr [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$539 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [15] -> \F2SRAM.spi_addr [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$540 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [16] -> \F2SRAM.spi_addr [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$541 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [17] -> \F2SRAM.spi_addr [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$542 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [18] -> \F2SRAM.spi_addr [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$543 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [19] -> \F2SRAM.spi_addr [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$544 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [20] -> \F2SRAM.spi_addr [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$545 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [21] -> \F2SRAM.spi_addr [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$546 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [22] -> \F2SRAM.spi_addr [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$547 to $_DFFE_PP_ for $techmap\F2SRAM.$0\spi_addr[23:0] [23] -> \F2SRAM.spi_addr [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$548 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [0] -> \F2SRAM.f_byte [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$549 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [1] -> \F2SRAM.f_byte [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$550 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [2] -> \F2SRAM.f_byte [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$551 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [3] -> \F2SRAM.f_byte [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$552 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [4] -> \F2SRAM.f_byte [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$553 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [5] -> \F2SRAM.f_byte [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$554 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [6] -> \F2SRAM.f_byte [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$555 to $_DFFE_PP_ for $techmap\F2SRAM.$0\f_byte[7:0] [7] -> \F2SRAM.f_byte [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$556 to $_DFFE_PP_ for $techmap\F2SRAM.$0\second[0:0] -> \F2SRAM.second.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$558 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [0] -> \F2SRAM.wdata [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$559 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [1] -> \F2SRAM.wdata [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$560 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [2] -> \F2SRAM.wdata [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$561 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [3] -> \F2SRAM.wdata [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$562 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [4] -> \F2SRAM.wdata [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$563 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [5] -> \F2SRAM.wdata [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$564 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [6] -> \F2SRAM.wdata [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$565 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [7] -> \F2SRAM.wdata [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$566 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [8] -> \F2SRAM.wdata [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$567 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [9] -> \F2SRAM.wdata [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$568 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [10] -> \F2SRAM.wdata [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$569 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [11] -> \F2SRAM.wdata [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$570 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [12] -> \F2SRAM.wdata [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$571 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [13] -> \F2SRAM.wdata [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$572 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [14] -> \F2SRAM.wdata [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$573 to $_DFFE_PP_ for $techmap\F2SRAM.$0\wdata[15:0] [15] -> \F2SRAM.wdata [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$575 to $_DFFE_PP_ for $techmap\F2SRAM.$0\addr[15:0] [1] -> \F2SRAM.addr [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$969 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [0] -> \dds_core.cos [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$970 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [1] -> \dds_core.cos [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$971 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [2] -> \dds_core.cos [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$972 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [3] -> \dds_core.cos [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$973 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [4] -> \dds_core.cos [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$974 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [5] -> \dds_core.cos [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$975 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [6] -> \dds_core.cos [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$976 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [7] -> \dds_core.cos [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$977 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [8] -> \dds_core.cos [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$978 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [9] -> \dds_core.cos [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$979 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [10] -> \dds_core.cos [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$980 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [11] -> \dds_core.cos [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$981 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [12] -> \dds_core.cos [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$982 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [13] -> \dds_core.cos [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$983 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [14] -> \dds_core.cos [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$984 to $_DFFE_PP_ for $techmap\dds_core.$0\cos[15:0] [15] -> \dds_core.cos [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$986 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [1] -> \dds_core.sin [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$987 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [2] -> \dds_core.sin [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$988 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [3] -> \dds_core.sin [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$989 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [4] -> \dds_core.sin [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$990 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [5] -> \dds_core.sin [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$991 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [6] -> \dds_core.sin [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$992 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [7] -> \dds_core.sin [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$993 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [8] -> \dds_core.sin [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$994 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [9] -> \dds_core.sin [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$995 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [10] -> \dds_core.sin [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$996 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [11] -> \dds_core.sin [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$997 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [12] -> \dds_core.sin [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$998 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [13] -> \dds_core.sin [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$999 to $_DFFE_PP_ for $techmap\dds_core.$0\sin[15:0] [14] -> \dds_core.sin [14].

9.34. Executing TECHMAP pass (map to technology primitives).

9.34.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

9.34.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~318 debug messages>

9.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~449 debug messages>

9.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

9.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$999 (SB_DFFE): \dds_core.sin [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$969 (SB_DFFE): \dds_core.cos [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1000 (SB_DFFE): \dds_core.sin [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1002 (SB_DFFE): \dds_core.addr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1003 (SB_DFFE): \dds_core.addr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1004 (SB_DFFE): \dds_core.addr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1005 (SB_DFFE): \dds_core.addr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1006 (SB_DFFE): \dds_core.addr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1007 (SB_DFFE): \dds_core.addr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1008 (SB_DFFE): \dds_core.addr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1009 (SB_DFFE): \dds_core.addr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1010 (SB_DFFE): \dds_core.addr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1011 (SB_DFFE): \dds_core.addr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1012 (SB_DFFE): \dds_core.addr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1013 (SB_DFFE): \dds_core.addr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1014 (SB_DFFE): \dds_core.addr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1015 (SB_DFFE): \dds_core.addr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1001 (SB_DFFE): \dds_core.addr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1016 (SB_DFFE): \dds_core.addr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1174 (SB_DFF): \DAC1.acc [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1175 (SB_DFF): \DAC1.acc [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1176 (SB_DFF): \DAC1.acc [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1177 (SB_DFF): \DAC1.acc [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1178 (SB_DFF): \DAC1.acc [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1179 (SB_DFF): \DAC1.acc [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1180 (SB_DFF): \DAC1.acc [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1181 (SB_DFF): \DAC1.acc [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1182 (SB_DFF): \DAC1.acc [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1183 (SB_DFF): \DAC1.acc [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1184 (SB_DFF): \DAC1.acc [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1185 (SB_DFF): \DAC1.acc [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1186 (SB_DFF): \DAC1.acc [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1187 (SB_DFF): \DAC1.acc [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1188 (SB_DFF): \DAC1.acc [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1189 (SB_DFF): \DAC1.acc [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1190 (SB_DFF): \DAC2.acc [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1191 (SB_DFF): \DAC2.acc [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1192 (SB_DFF): \DAC2.acc [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1193 (SB_DFF): \DAC2.acc [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1194 (SB_DFF): \DAC2.acc [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1195 (SB_DFF): \DAC2.acc [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1173 (SB_DFF): \DAC1.acc [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1196 (SB_DFF): \DAC2.acc [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1198 (SB_DFF): \DAC2.acc [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1199 (SB_DFF): \DAC2.acc [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1200 (SB_DFF): \DAC2.acc [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1201 (SB_DFF): \DAC2.acc [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1202 (SB_DFF): \DAC2.acc [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1203 (SB_DFF): \DAC2.acc [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1204 (SB_DFF): \DAC2.acc [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1205 (SB_DFF): \DAC2.acc [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1206 (SB_DFF): \DAC2.acc [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1197 (SB_DFF): \DAC2.acc [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1210 (SB_DFF): \pll1.l_in = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1227 (SB_DFF): \pll1.l2_in = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1229 (SB_DFFE): \pll1.incr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1230 (SB_DFFE): \pll1.incr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1231 (SB_DFFE): \pll1.incr [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1232 (SB_DFFE): \pll1.incr [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1233 (SB_DFFE): \pll1.incr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1234 (SB_DFFE): \pll1.incr [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1235 (SB_DFFE): \pll1.incr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1236 (SB_DFFE): \pll1.incr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1237 (SB_DFFE): \pll1.incr [9] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1238 (SB_DFFE): \pll1.incr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1239 (SB_DFFE): \pll1.incr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1240 (SB_DFFE): \pll1.incr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1241 (SB_DFFE): \pll1.incr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1242 (SB_DFFE): \pll1.incr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1243 (SB_DFFE): \pll1.incr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1228 (SB_DFFE): \pll1.incr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1245 (SB_DFF): \pll1.locked = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1244 (SB_DFFE): \pll1.incr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1247 (SB_DFF): \pll1.phase [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1248 (SB_DFF): \pll1.phase [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1249 (SB_DFF): \pll1.phase [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1250 (SB_DFF): \pll1.phase [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1251 (SB_DFF): \pll1.phase [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1252 (SB_DFF): \pll1.phase [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1253 (SB_DFF): \pll1.phase [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1254 (SB_DFF): \pll1.phase [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1255 (SB_DFF): \pll1.phase [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1256 (SB_DFF): \pll1.phase [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1257 (SB_DFF): \pll1.phase [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1258 (SB_DFF): \pll1.phase [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1259 (SB_DFF): \pll1.phase [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1260 (SB_DFF): \pll1.phase [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1261 (SB_DFF): \pll1.phase [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1262 (SB_DFF): \pll1.phase [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1263 (SB_DFF): \pll1.phase [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1264 (SB_DFF): \pll1.phase [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1265 (SB_DFF): \pll1.phase [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1266 (SB_DFF): \pll1.phase [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1267 (SB_DFF): \pll1.phase [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1268 (SB_DFF): \pll1.phase [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1269 (SB_DFF): \pll1.phase [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1270 (SB_DFF): \pll1.phase [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1271 (SB_DFF): \pll1.phase [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1272 (SB_DFF): \pll1.phase [26] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1273 (SB_DFF): \pll1.phase [27] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1274 (SB_DFF): \pll1.phase [28] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1275 (SB_DFF): \pll1.phase [29] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1276 (SB_DFF): \pll1.phase [30] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1246 (SB_DFF): \pll1.phase [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1277 (SB_DFF): \pll1.phase [31] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$477 (SB_DFF): \count [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$482 (SB_DFF): \count [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$478 (SB_DFF): \count [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$472 (SB_DFFE): \count [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$473 (SB_DFF): \count [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$587 (SB_DFF): \F2SRAM.addr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$560 (SB_DFFE): \F2SRAM.wdata [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$480 (SB_DFF): \count [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$481 (SB_DFF): \count [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$474 (SB_DFF): \count [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$483 (SB_DFF): \count [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$484 (SB_DFF): \count [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$485 (SB_DFF): \count [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$486 (SB_DFF): \count [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$487 (SB_DFF): \count [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$488 (SB_DFF): \count [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$506 (SB_DFFE): \F2SRAM.poscount [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$588 (SB_DFF): \F2SRAM.addr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$503 (SB_DFF): \rst = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$504 (SB_DFFE): \loadlookup = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$507 (SB_DFF): \F2SRAM.poscount [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$508 (SB_DFF): \F2SRAM.poscount [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$509 (SB_DFF): \F2SRAM.poscount [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$510 (SB_DFF): \F2SRAM.poscount [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$511 (SB_DFF): \F2SRAM.poscount [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$512 (SB_DFF): \F2SRAM.poscount [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$513 (SB_DFF): \F2SRAM.poscount [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$514 (SB_DFF): \F2SRAM.poscount [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$515 (SB_DFF): \F2SRAM.poscount [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$516 (SB_DFF): \F2SRAM.poscount [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$517 (SB_DFF): \F2SRAM.poscount [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$518 (SB_DFF): \F2SRAM.poscount [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$519 (SB_DFF): \F2SRAM.poscount [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$520 (SB_DFF): \F2SRAM.poscount [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$521 (SB_DFF): \F2SRAM.poscount [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$525 (SB_DFFE): \F2SRAM.spi_addr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$505 (SB_DFF): \F2SRAM.poscount [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$522 (SB_DFFE): \F2SRAM.busystop = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$523 (SB_DFF): \F2SRAM.spi_go = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$526 (SB_DFFE): \F2SRAM.spi_addr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$527 (SB_DFFE): \F2SRAM.spi_addr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$528 (SB_DFFE): \F2SRAM.spi_addr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$529 (SB_DFFE): \F2SRAM.spi_addr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$530 (SB_DFFE): \F2SRAM.spi_addr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$531 (SB_DFFE): \F2SRAM.spi_addr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$532 (SB_DFFE): \F2SRAM.spi_addr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$533 (SB_DFFE): \F2SRAM.spi_addr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$534 (SB_DFFE): \F2SRAM.spi_addr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$535 (SB_DFFE): \F2SRAM.spi_addr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$536 (SB_DFFE): \F2SRAM.spi_addr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$537 (SB_DFFE): \F2SRAM.spi_addr [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$538 (SB_DFFE): \F2SRAM.spi_addr [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$539 (SB_DFFE): \F2SRAM.spi_addr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$540 (SB_DFFE): \F2SRAM.spi_addr [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$541 (SB_DFFE): \F2SRAM.spi_addr [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$542 (SB_DFFE): \F2SRAM.spi_addr [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$543 (SB_DFFE): \F2SRAM.spi_addr [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$545 (SB_DFFE): \F2SRAM.spi_addr [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$546 (SB_DFFE): \F2SRAM.spi_addr [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$547 (SB_DFFE): \F2SRAM.spi_addr [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$544 (SB_DFFE): \F2SRAM.spi_addr [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$524 (SB_DFFE): \F2SRAM.spi_addr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$559 (SB_DFFE): \F2SRAM.wdata [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$556 (SB_DFFE): \F2SRAM.second = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$557 (SB_DFF): \F2SRAM.laststart = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$562 (SB_DFFE): \F2SRAM.wdata [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$561 (SB_DFFE): \F2SRAM.wdata [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$564 (SB_DFFE): \F2SRAM.wdata [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$563 (SB_DFFE): \F2SRAM.wdata [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$476 (SB_DFF): \count [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$565 (SB_DFFE): \F2SRAM.wdata [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$567 (SB_DFFE): \F2SRAM.wdata [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$576 (SB_DFF): \F2SRAM.addr [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$568 (SB_DFFE): \F2SRAM.wdata [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$569 (SB_DFFE): \F2SRAM.wdata [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$570 (SB_DFFE): \F2SRAM.wdata [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$571 (SB_DFFE): \F2SRAM.wdata [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$572 (SB_DFFE): \F2SRAM.wdata [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$573 (SB_DFFE): \F2SRAM.wdata [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$575 (SB_DFFE): \F2SRAM.addr [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$558 (SB_DFFE): \F2SRAM.wdata [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$566 (SB_DFFE): \F2SRAM.wdata [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$577 (SB_DFF): \F2SRAM.addr [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$578 (SB_DFF): \F2SRAM.addr [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$579 (SB_DFF): \F2SRAM.addr [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$580 (SB_DFF): \F2SRAM.addr [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$581 (SB_DFF): \F2SRAM.addr [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$582 (SB_DFF): \F2SRAM.addr [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$583 (SB_DFF): \F2SRAM.addr [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$584 (SB_DFF): \F2SRAM.addr [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$585 (SB_DFF): \F2SRAM.addr [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$586 (SB_DFF): \F2SRAM.addr [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$475 (SB_DFF): \count [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$479 (SB_DFF): \count [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$589 (SB_DFF): \F2SRAM.addr [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$471 (SB_DFF): \count [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$574 (SB_DFF): \F2SRAM.addr [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$590 (SB_DFF): \F2SRAM.busy = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$591 (SB_DFF): \F2SRAM.wen = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$966 (SB_DFF): \dds_core.islast = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$967 (SB_DFF): \dds_core.lastgo = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$968 (SB_DFF): \dds_core.iscos = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$970 (SB_DFFE): \dds_core.cos [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$971 (SB_DFFE): \dds_core.cos [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$972 (SB_DFFE): \dds_core.cos [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$973 (SB_DFFE): \dds_core.cos [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$974 (SB_DFFE): \dds_core.cos [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$975 (SB_DFFE): \dds_core.cos [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$976 (SB_DFFE): \dds_core.cos [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$977 (SB_DFFE): \dds_core.cos [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$978 (SB_DFFE): \dds_core.cos [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$979 (SB_DFFE): \dds_core.cos [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$980 (SB_DFFE): \dds_core.cos [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$981 (SB_DFFE): \dds_core.cos [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$982 (SB_DFFE): \dds_core.cos [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$983 (SB_DFFE): \dds_core.cos [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$984 (SB_DFFE): \dds_core.cos [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$986 (SB_DFFE): \dds_core.sin [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$987 (SB_DFFE): \dds_core.sin [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$988 (SB_DFFE): \dds_core.sin [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$989 (SB_DFFE): \dds_core.sin [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$990 (SB_DFFE): \dds_core.sin [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$991 (SB_DFFE): \dds_core.sin [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$992 (SB_DFFE): \dds_core.sin [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$993 (SB_DFFE): \dds_core.sin [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$994 (SB_DFFE): \dds_core.sin [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$995 (SB_DFFE): \dds_core.sin [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$996 (SB_DFFE): \dds_core.sin [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$997 (SB_DFFE): \dds_core.sin [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$998 (SB_DFFE): \dds_core.sin [13] = 0

9.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$1584 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [17], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1451 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1366 (A=$techmap\pll1.$sub$pll.v:34$109_Y [0], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1211 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1373 (A=$techmap\pll1.$sub$pll.v:34$109_Y [7], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1218 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1367 (A=$auto$simplemap.cc:309:simplemap_lut$2482, B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1212 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1368 (A=$techmap\pll1.$sub$pll.v:34$109_Y [2], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1213 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1369 (A=$techmap\pll1.$sub$pll.v:34$109_Y [3], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1214 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1370 (A=$techmap\pll1.$sub$pll.v:34$109_Y [4], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1215 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1371 (A=$techmap\pll1.$sub$pll.v:34$109_Y [5], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1216 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1372 (A=$techmap\pll1.$sub$pll.v:34$109_Y [6], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1217 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1374 (A=$techmap\pll1.$sub$pll.v:34$109_Y [8], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1219 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1375 (A=$techmap\pll1.$sub$pll.v:34$109_Y [9], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1220 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1376 (A=$techmap\pll1.$sub$pll.v:34$109_Y [10], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1221 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1377 (A=$techmap\pll1.$sub$pll.v:34$109_Y [11], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1222 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1378 (A=$techmap\pll1.$sub$pll.v:34$109_Y [12], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1223 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1379 (A=$techmap\pll1.$sub$pll.v:34$109_Y [13], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1224 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1380 (A=$techmap\pll1.$sub$pll.v:34$109_Y [14], B=1'1, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1225 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1381 (A=$techmap\pll1.$sub$pll.v:34$109_Y [15], B=1'0, S=$techmap\pll1.$reduce_or$pll.v:33$108_Y) into $auto$simplemap.cc:420:simplemap_dff$1226 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1312 (A=$techmap\pll1.$add$pll.v:40$117_Y [1], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1247 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1313 (A=$techmap\pll1.$add$pll.v:40$117_Y [2], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1248 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1314 (A=$techmap\pll1.$add$pll.v:40$117_Y [3], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1249 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1315 (A=$techmap\pll1.$add$pll.v:40$117_Y [4], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1250 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1316 (A=$techmap\pll1.$add$pll.v:40$117_Y [5], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1251 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1317 (A=$techmap\pll1.$add$pll.v:40$117_Y [6], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1252 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1318 (A=$techmap\pll1.$add$pll.v:40$117_Y [7], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1253 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1319 (A=$techmap\pll1.$add$pll.v:40$117_Y [8], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1254 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1320 (A=$techmap\pll1.$add$pll.v:40$117_Y [9], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1255 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1321 (A=$techmap\pll1.$add$pll.v:40$117_Y [10], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1256 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1322 (A=$techmap\pll1.$add$pll.v:40$117_Y [11], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1257 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1323 (A=$techmap\pll1.$add$pll.v:40$117_Y [12], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1258 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1324 (A=$techmap\pll1.$add$pll.v:40$117_Y [13], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1259 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1325 (A=$techmap\pll1.$add$pll.v:40$117_Y [14], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1260 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1326 (A=$techmap\pll1.$add$pll.v:40$117_Y [15], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1261 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1327 (A=$techmap\pll1.$add$pll.v:40$117_Y [16], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1262 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1328 (A=$techmap\pll1.$add$pll.v:40$117_Y [17], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1263 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1329 (A=$techmap\pll1.$add$pll.v:40$117_Y [18], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1264 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1330 (A=$techmap\pll1.$add$pll.v:40$117_Y [19], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1265 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1331 (A=$techmap\pll1.$add$pll.v:40$117_Y [20], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1266 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1332 (A=$techmap\pll1.$add$pll.v:40$117_Y [21], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1267 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1333 (A=$techmap\pll1.$add$pll.v:40$117_Y [22], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1268 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1334 (A=$techmap\pll1.$add$pll.v:40$117_Y [23], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1269 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1335 (A=$techmap\pll1.$add$pll.v:40$117_Y [24], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1270 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1336 (A=$techmap\pll1.$add$pll.v:40$117_Y [25], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1271 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1337 (A=$techmap\pll1.$add$pll.v:40$117_Y [26], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1272 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1338 (A=$techmap\pll1.$add$pll.v:40$117_Y [27], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1273 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1339 (A=$techmap\pll1.$add$pll.v:40$117_Y [28], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1274 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1340 (A=$techmap\pll1.$add$pll.v:40$117_Y [29], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1275 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1341 (A=$techmap\pll1.$add$pll.v:40$117_Y [30], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1276 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1311 (A=$techmap\pll1.$add$pll.v:40$117_Y [0], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1246 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1342 (A=$techmap\pll1.$add$pll.v:40$117_Y [31], B=1'0, S=$techmap\pll1.$logic_and$pll.v:45$119_Y) into $auto$simplemap.cc:420:simplemap_dff$1277 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1454 (A=1'0, B=\F2SRAM.SPI_READER.fsm_state_next [1], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1395 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1488 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [1], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1397 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1489 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [2], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1398 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1490 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [3], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1399 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1491 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [4], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1400 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1492 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [5], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1401 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1493 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [6], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1402 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1494 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [7], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1403 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1495 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [8], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1404 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1496 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [9], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1405 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1497 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [10], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1406 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1498 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [11], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1407 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1499 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [12], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1408 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1500 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [13], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1409 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1501 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [14], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1410 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1502 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [15], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1411 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1503 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [16], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1412 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1504 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [17], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1413 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1505 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [18], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1414 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1506 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [19], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1415 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1507 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [20], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1416 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1508 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [21], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1417 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1509 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [22], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1418 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1510 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [23], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1419 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1511 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [24], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1420 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1512 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [25], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1421 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1513 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [26], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1422 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1514 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [27], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1423 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1515 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [28], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1424 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1516 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [29], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1425 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1517 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [30], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1426 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1487 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [0], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1396 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1561 (A=$auto$simplemap.cc:309:simplemap_lut$1468, B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1428 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1518 (A=1'1, B=$techmap\F2SRAM.SPI_READER.$procmux$203_Y [31], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1427 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1552 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$197_Y [1], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1430 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1551 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$197_Y [0], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1429 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1553 (A=1'0, B=$techmap\F2SRAM.SPI_READER.$procmux$197_Y [2], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1431 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1563 (A=$auto$alumacc.cc:474:replace_alu$372.lcu.p [0], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1432 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1564 (A=$techmap$auto$alumacc.cc:474:replace_alu$372.$xor$/usr/local/bin/../share/yosys/techmap.v:263$1627_Y [1], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1433 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1568 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [1], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1435 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1569 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [2], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1436 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1570 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [3], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1437 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1571 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [4], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1438 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1572 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [5], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1439 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1573 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [6], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1440 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1574 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [7], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1441 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1575 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [8], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1442 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1576 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [9], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1443 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1577 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [10], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1444 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1578 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [11], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1445 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1579 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [12], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1446 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1580 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [13], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1447 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1581 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [14], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1448 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1582 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [15], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1449 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1583 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [16], B=1'1, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1450 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1567 (A=$techmap\F2SRAM.SPI_READER.$sub$spi_flash_reader.v:178$73_Y [0], B=1'0, S=\F2SRAM.spi_go) into $auto$simplemap.cc:420:simplemap_dff$1434 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1453 (A=1'0, B=\F2SRAM.SPI_READER.fsm_state_next [0], S=\rst) into $auto$simplemap.cc:420:simplemap_dff$1394 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$821 (A=1'0, B=$techmap\F2SRAM.$procmux$244_Y, S=\F2SRAM.busy) into $auto$simplemap.cc:420:simplemap_dff$591 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1133 (A=\dds_core.iscos, B=1'0, S=\dds_core.islast) into $auto$simplemap.cc:420:simplemap_dff$966 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1132 (A=$techmap\dds_core.$logic_and$dds.v:23$96_Y, B=1'0, S=\dds_core.iscos) into $auto$simplemap.cc:420:simplemap_dff$968 (SB_DFF).

9.39. Executing ICE40_OPT pass (performing simple optimizations).

9.39.1. Running ICE40 specific optimizations.

9.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~97 debug messages>

9.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~720 debug messages>
Removed a total of 240 cells.

9.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

9.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 93 unused cells and 1752 unused wires.
<suppressed ~94 debug messages>

9.39.6. Rerunning OPT passes. (Removed registers in this run.)

9.39.7. Running ICE40 specific optimizations.

9.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~1 debug messages>

9.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

9.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.39.12. Rerunning OPT passes. (Removed registers in this run.)

9.39.13. Running ICE40 specific optimizations.

9.39.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

9.39.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

9.39.16. Executing OPT_RMDFF pass (remove dff with constant values).

9.39.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9.39.18. Finished OPT passes. (There is nothing left to do.)

9.40. Executing TECHMAP pass (map to technology primitives).

9.40.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

9.40.2. Continuing TECHMAP pass.
No more expansions possible.

9.41. Executing ABC pass (technology mapping using ABC).

9.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 605 gates and 919 wires to a netlist network with 312 inputs and 245 outputs.

9.41.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     250.
ABC: Participating nodes from both networks       =     518.
ABC: Participating nodes from the first network   =     251. (  81.23 % of nodes)
ABC: Participating nodes from the second network  =     267. (  86.41 % of nodes)
ABC: Node pairs (any polarity)                    =     251. (  81.23 % of names can be moved)
ABC: Node pairs (same polarity)                   =     248. (  80.26 % of names can be moved)
ABC: Total runtime =     0.01 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

9.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      308
ABC RESULTS:        internal signals:      362
ABC RESULTS:           input signals:      312
ABC RESULTS:          output signals:      245
Removing temp directory.
Removed 0 unused cells and 442 unused wires.

9.42. Executing ICE40_UNLUT pass (convert SB_LUT4 to $lut).
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[17].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$354.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$357.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$360.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$363.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$366.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$369.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[17].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$375.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[17].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[18].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[19].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[20].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[21].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[22].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[23].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[24].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[25].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[26].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[27].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[28].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[29].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[30].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[31].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$378.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$381.slice[9].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$384.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$384.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$384.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$384.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$384.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[0].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[10].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[11].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[12].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[13].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[14].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[15].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[16].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[1].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[2].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[3].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[4].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[5].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[6].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[7].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[8].adder to $lut.
Mapping SB_LUT4 cell top.$auto$maccmap.cc:240:synth$946.slice[9].adder to $lut.

9.42.1. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:      478
  1-LUT               41
  2-LUT               51
  3-LUT              288
  4-LUT               98
  with \SB_CARRY     155

Eliminating LUTs.
Number of LUTs:      476
  1-LUT               39
  2-LUT               51
  3-LUT              288
  4-LUT               98
  with \SB_CARRY     155

Combining LUTs.
Number of LUTs:      465
  1-LUT               31
  2-LUT               47
  3-LUT              291
  4-LUT               96
  with \SB_CARRY     155

Eliminated 2 LUTs.
Combined 11 LUTs.
<suppressed ~1717 debug messages>

9.42.2. Executing TECHMAP pass (map to technology primitives).

9.42.2.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

9.42.2.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010101100000010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001011001101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111011100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011000000110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110011000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110011011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001111101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000100011110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101011100000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000001 for cells of type $lut.
No more expansions possible.
<suppressed ~1092 debug messages>
Removed 0 unused cells and 941 unused wires.

9.42.3. Executing HIERARCHY pass (managing design hierarchy).

9.42.3.1. Analyzing design hierarchy..
Top module:  \top

9.42.3.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

9.42.4. Printing statistics.

=== top ===

   Number of wires:                437
   Number of wire bits:           1451
   Number of public wires:         113
   Number of public wire bits:     810
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                963
     SB_CARRY                      171
     SB_DFF                         91
     SB_DFFE                       118
     SB_DFFESR                      11
     SB_DFFESS                      31
     SB_DFFSR                       62
     SB_DFFSS                        5
     SB_IO                           4
     SB_LUT4                       465
     SB_PLL40_CORE                   1
     SB_SPRAM256KA                   4

9.42.5. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

9.42.6. Executing JSON backend.

Warnings: 4 unique messages, 4 total
End of script. Logfile hash: d70692cf7f
CPU: user 1.67s system 0.04s, MEM: 74.96 MB total, 42.70 MB resident
Yosys 0.8+612 (git sha1 c6d8692c, clang 6.0.0-1ubuntu2 -fPIC -Os)
Time spent: 20% 21x opt_clean (0 sec), 13% 20x opt_expr (0 sec), ...
